Instructions to demonstrate reference code (Feb 2020)

---------------------------------------------------------------------
Docker Simulation

The docker simulation script allows you to launch any number of MyCHIPs
server instances in docker containers.  There is also an agent model
modules that will run on behalf of simulated users to create a data set of
CHIP trades.

To run the simulation, install Docker on your machine and then get into 
test/sim and follow instructions in README.dock.

The simulation environment was developed on MacOS but it should also be 
possible (though not well tested) to run on a Linux host.

---------------------------------------------------------------------
Docker Test Instance

This is probably the best way to take MyCHIPs for a quick test run.  You will
need docker installed on your system.  But theoretically, you should be able
to do this on Mac, Linux or Windows.

To launch a server/database pair:

  npm run docker

This will probably take a while on first run to build some images.  But it
will be faster on subsequent runs.  It will run until you interrupt it with
a CTRL-C or the like.

The server is configured from the file build/config-dev.env.  By making
multiple such configuration files, you should be able to launch multiple
instances of the server pair.  Keep in mind, the hostname you choose for
the MyCHIPs server will have to resolve on your system.  For testing, you can
solve this with a line in /etc/hosts:

  127.0.0.1	mychips0

This hostname is what we will be entering into the browser to get the admin
app.  It is also what will be built into the SSL certificates so all that
has to use the same hostname for the browser to be happy.

Once your server pair is running, you will need to connect to it.  You will
have to use a bootstrap command to get the database to grant a connection for
the admin user:

  docker exec mychips0 bin/adminticket -S 8000 -P 54320 -H mychips0 -Q

The SPA port and WebSocket ports in this command must match up with what you
have in the configuration files for the server pair you launched.  That
command will spit out a URL which you can copy/paste into your browser.  Or
if you are really tricky you can do it all in one whack something like 
this (on Mac OS):

  open -n -a Firefox.app --args -new-tab \
    $(d exec mychips0 bin/adminticket -S 8000 -P 54320 -H mychips0 -Q)

This will probably complain because you are connecting to a URL with an
unknown certificate authority.  To fix that, you will have to import the
CA file created by the system as follows (again for Mac OS):

  open test/local/docker/pki/spa-ca.crt

You will need to tell the OS (in Keychain Access) to fully trust this CA.
You should find it called Chippies.chip.

Windows has a similar system for importing certificate authorities.  For
Linux, you may have to import it directly into the browser you are using.
You may also have to restart Firefox if that is what you are using.

Then generate a fresh connection ticket as noted above and connect to it.

The MyCHIPs server should be creating logs which you can view with:

  tail -f test/local/docker/mychips0.log/combined.log

The PostgreSQL server creates logs you can view with this command:

  docker logs -f postgres0 --tail -0

Once connected, you should be able to view users by finding the "Load All"
button in the smaller hamburger menu on the upper left area of the preview
window.  There will probably be only a single user: admin.

To make things more interesting, try this:

  docker exec mychips0 test/sample/randuser -n 4

Now reload to see 4 more users on your system.  Double click on one of those
users to open an editing pane.  Execute the Actions menu item in the editing
pane to generate a connection ticket for that user.  This is a QR code by
default, but there are also links there to copy/paste a URL into a browser
to connect to the User (as opposed to admin) UI.

---------------------------------------------------------------------
To manually configure a native Linux environment for testing the MyCHIPs 
server:

- Install Postgres, as root:
  dnf install postgresql postgresql-server postgresql-devel \
  	postgresql-pltcl postgresql-plpython postgresql-contrib
  dnf install ruby rubygem-pg rubygem-tk	#If you plan to modify the schema
  su -l postgres -c initdb
  systemctl enable postgresql
  systemctl start postgresql
  su -l postgres -c 'createuser -d -s -r admin'

- Other known dependencies hopefully installed on your system by default:
  bash, openssl, nodejs, others?

- Create a folder to work in:
  mkdir devel; cd devel			#For example

- checkout mychips:
  git clone https://github.com/gotchoices/MyCHIPs.git
  cd mychips
  npm install				#Install all dependencies
  npm init				#Initialize local certificates

- Create an admin login ticket		#This will also build the db schema
  npm run adminticket

- Run mychips server:
  npm run server

  If you have trouble, set NODE_DEBUG=debug environment variable
  and watch log files in /var/tmp/mychips
  (Limited testing is possible without SSL: npm run server -- -n)

- Try connecting to the SPA (possibly from another machine):
  Direct your browser to:	https://<hostname>:8000/admin.html
  
  If connecting over https, your browser should warn you of an insecure site.  
  For testing, you may be able to just proceed anyway.  Better yet, the
  "npm init" command above should have created a certificate in
  pki/local/spa-ca.crt.  If you tell your os/browser you trust that CA, you
  can proceed without warnings.
  
  See the file in pki/README for more details about securing your site with
  an SSL certificate (whether you use a commercial certificate or make your 
  own).
  
  If the connection is working, you should see an open connection dialog in the 
  upper right corner of the app.

- You will need a ticket to initialize the connection.  In the step above, a
  ticket was created in (by default): test/local/admin.json.
  If it hasn't expired yet, you can use it now.
  
  Otherwise, you need to generate a new one so do that now:
  
  npm run adminticket			#or:
  npm run adminticket -- -H hostname -P port -o ticket_file.json
  
  For example, something like:
  npm run adminticket -- -H 192.168.56.101 -o test/local/ticket.json	#or
  bin/adminticket mychips.mydomain.com -o test/tmp/ticket.json
  
  Make sure the host address matches what is on the spa certificate you built
  using the "npm run init" or "npm run cert" commands.  (See pki/README for
  more detailed info on this.)
  
- Use the "Import Keys:" option in the connection dialog to open the ticket file.
  You may also drag/drop your ticket file onto the Import button.
  
  Double click on the imported ticket to initiate your connection.
  You should now be prompted for your username (admin).  The username is purposely
  not included in the ticket file as a security measure.  The user has to know
  what user the ticket is intended for.
  
  If the ticket is recognized, the GUI should connect to the backend, and promote
  the ticket to a connection key.  Note, the token can only be used once and it
  expires fairly quickly.  If you fail to connect, you may have to issue a new
  ticket (which will automatically invalidate the previous one).

  The system should next prompt you for a pass phrase.  This phrase will be used
  when storing your connection key in the browser local storage so others with
  access to your computer can't steal your key.  Leave it blank if you don't want
  to encrypt your key (bad idea in a production environment).

  You should then also export your key and save it in a safe place.  You can
  use this same key in other browsers or to restore your connection if you lose
  or clear your local storage.  If you lose the admin key, you will have to 
  reissue a connection token using the procedure above.  The admin user can issue
  connection tokens for other users using the admin GUI.
  
  URL Tickets:
  It is now possible using the -Q switch to make adminticket produce a URL which
  you can connect to directly, eliminating the need to import a key file into the
  UI as described above.  Something like:
  
    chrome $(bin/adminticket -Q)
  
  See the documentation in the wylib package for more detailed information on 
  connection keys.
  
- Now add some sample test data to the database:

    cd test
    
  Edit the settings file to set IP number of the test machine your database is
  on, and then:
  
    cd sample
    ./kickstart

  Reload the user preview in the admin GUI, should see 4 users.

- View the live network graph (Network tab)
  See your users on the graph
  Use the graph menu (Upper Right) to Reset or Arrange if necessary

- Add sample tallies/chits (while watching the live Network display)
  Still in test/sample:
    psql mychips admin -f tallies.sql
    psql mychips admin -f chits.sql
  
  Remove them again with
    psql mychips admin -c "delete from mychips.tallies"

- Add more random users (while still watching the graph)
  ./randuser					# or:
  ./randuser -n Number_of_Users_to_Add
  
  Press Arrange button (or hold it) in graph menu to arrange nodes better

- Launch the agent simulation model:
  cd test/sim
  ./agent
  
  You can watch as the user nodes will begin to form tallies with each other 
  and begin to trade chits over the tallies.
  
- Lifts
  When the graph accumulates some debits and credits, you can try executing
  some local credit lifts.  Keep in mind, this is not a network simulation
  but only working with a set of users within a single database.
  To work with distributed lifts, go to test/sim/README.dock.
  
  To examine the local lift path table, execute this SQL:

    select * from mychips.tallies_v_lifts  
  
  To run a single credit lift, execute this SQL:
  
    select mychips.lift_cycle(1)		-- Argument = max number of lifts

---------------------------------------------------------------------  
Want to browse the database schema:

- Launch the server with the -w switch:
  npm run server -- -w
  
- Direct your browser to:	https://<hostname>:8000/wysegi.html

You will need the same admin connection key as was established above.  Go to 
the working admin console, click the server button near the top right, select
your connection key and then "Export keys" from the menu.  This should export
your key to your Downloads folder.  Then go to the Wysegi UI and import that
same key into the server connection dialog.

---------------------------------------------------------------------  
Database Logging:

You may want to monitor notice logging from postgres.  If so, you may
have to edit pgsql/data/postgresql.conf and set the following:

log_min_messages=notice

---------------------------------------------------------------------  
If you will be working on the Wyatt-ERP source code:

- You will need to run the "npm develop" script.  This will remove the four 
  Wyatt modules out of mychips/node_modules.  It will expect to find those 
  same modules (wyseman, wylib, wyselib, wyclif) in folders at the same level 
  as the mychips folder.  You will have to check these out from github, for
  example:

    git clone https://github.com/gotchoices/wyselib.git
  
  The develop script will run an "npm install" at one level above mychips 
  which will build an npm_modules folder there and make the required modules 
  accessible to MyCHIPs.
  
  By doing it this way, you are able to edit/change things in the Wyatt code
  and the changes will be immediately accessible to the next run of MyCHIPs.

---------------------------------------------------------------------  
  If you are editing the database schema, you will likely need the following 
  package installations:

    dnf install rubygem-pg rubygem-tk gcc-c++
    gem install json
  
  See wyseman/INSTALL for more installation details

  When MyCHIPs runs for the first time, it will build a stock schema in the
  database if it can't find one.  But you can modify that schema on the fly
  from the sources in the schema folder.  This is done by:

    cd mychips/schema
    make objects
    
  This will also build a few more items in the database for tracking the state
  of the schema (so it knows which objects need to be rebuilt at any given
  time).  So it may generate errors on the first run if your schema was 
  instantiated by MyCHIPs (as opposed to this manual build method).

---------------------------------------------------------------------  
If you will be working on Wylib:

- Check out the wylib source (if not already done):
    git clone https://github.com/gotchoices/wylib.git
    
- Run the "npm develop" script as noted above.
  
- Run a 'watched' build in wylib:
  cd wylib
  npm run dev-build

- Run a similar build in mychips:
  cd mychips
  npm run dev-build

- Any changes you make in either the wylib source, or the MyCHIPs source
  will be detected and the packges will be automatically rebuilt.  You can
  just reload your browser to grab the latest changes to the SPA.
  
  If you are making changes to the server side code, you will have to
  restart that manually.
  
  It is also possible to run "npm run dev-hot" in the mychips directory.
  This allows you to run the SPA out of port 3000 (rather than 8000).  This
  may not always work right if you are working on actions/reports.

---------------------------------------------------------------------  
Testing:

- Run Mocha tests 		(This is done in a separate database)
  Can set NODE_DEBUG=debug (or trace) and observe logs in /var/tmp/mychips
  cd devel/mychips/test
  Adjust settings in test/settings.js for your environment

  npm test				#Or, separately:
  
  npm run test-peercom
  npm run test-impexp
  npm run test-peer

  dropdb mychipsTestDB			#When finished with tests
  
---------------------------------------------------------------------  
