Instructions to demonstrate reference code. (Dec, 2018)
Currently tested on a Fedora 29 linux machine:

- Install Postgres, as root:
  dnf install postgresql postgresql-server postgresql-devel postgresql-pltcl postgresql-contrib
  dnf install ruby rubygem-pg rubygem-tk	#If you plan to modify the schema
  su -l postgres -c initdb
  systemctl enable postgresql
  systemctl start postgresql
  su -l postgres -c 'createuser -d -s -r admin'

- Create a folder to work in:
  mkdir devel; cd devel			#For example

- checkout mychips (currently on bitbucket):
  git clone https://your-username@bitbucket.org/kylebateman/mychips.git
  cd mychips
  npm install				#Install all dependencies

- Run mychips server:
  npm run server			#Should also initialize database
  If you have trouble, set NODE_DEBUG=debug environment variable
  and watch logs in /var/tmp/mychips
  You may also test running insecurely: npm run server -- -n

- Try connecting to the SPA (possibly from another machine):
  Direct your browser to:	https://<hostname>:8000/admin.html
                      or:	http://<hostname>:8000/admin.html
  
  If connecting over https, your browser should warn you of an insecure site.  
  For testing, you can just proceed anyway.  Later you will want to create a 
  real site certificate for the server.
  
  If the connection is working, you should see an open connection dialog in the 
  upper right corner of the app.

- You will need a ticket to authorize the connection:
  cd test/sample
  ./adminticket <hostname> <port> ><ticket_file>	#Save the ticket to a file
  
  For example:
  ./adminticket 192.168.56.101 54320 >../tmp/admin.json
  
- Use the "Import Keys:" option in the connection dialog to open the ticket file.
  You may also drag/drop your ticket file onto the Import button.
  
  Double click on the imported ticket to initiate your connection.
  You should now be prompted for your username (admin).
  The GUI should connect to the backend, and turn your ticket into a key.

  The system should next prompt you for a pass phrase.  This phrase will be used
  when storing your connection key in the browser local storage so others with
  access to your computer can't steal your key.
  
  See instructions in the wylib package for more information on connection keys.
  
- Now add some sample test data to the database:
  cd test
  edit settings file to set IP number of the test machine you are on
  cd sample
  ./kickstart
  Reload the user preview in the admin GUI, should see 5 users

- View the live network graph (Network tab)
  See your 5 users on the graph
  Use the graph menu (Upper Right) to Reset or Arrange if necessary

- Add sample tallies/chits (while watching the live Network display)
  Still in test/sample
  Specify database name only if not the same as your username (default)
  psql <Database_Name> admin -f tallies.sql
  psql <Database_Name> admin -f chits.sql

- Add more random users (while still watching the graph)
  ./randuser					# or:
  ./randuser -n Number_of_Users_to_Add
  
  Press Arrange button (or hold it) in graph menu to arrange nodes better

- Quit mychips server (Ctrl-C) and restart with agent model running:
  npm run server -- -m
  
  It doesn't do much right now, except find one other node to connect to.

---------------------------------------------------------------------  
Want to browse the database schema:

- Direct browser to:		http://localhost:8001/wysegi.html

---------------------------------------------------------------------  
If you will be working on wyseman:

- Remove mychips/node_modules/wyseman
  cd mychips/..
  git clone https://github.com/gotchoices/wyseman.git
  ln -s wyseman mychips/node_modules

- See wyseman/INSTALL for more installation details
  dnf install rubygem-pg rubygem-tk gcc-c++	;As root
  gem install json				;As you

---------------------------------------------------------------------  
If you will be working on the PostgreSQL schema:

- Remove mychips/node_modules/wyselib
  cd mychips/..
  git clone https://github.com/gotchoices/wyselib.git
  ln -s wyselib mychips/node_modules

- You may have to drop your database, if it was created automatically

- Build schema in your database from sources:
  Set WYATTDB if you use a DB name different from your username
  cd mychips/schema
  make all

---------------------------------------------------------------------  
If you will be working on Wylib:

- Remove mychips/node_modules/wylib
  cd mychips/..
  git clone https://github.com/gotchoices/wylib.git
  ln -s wylib mychips/node_modules

- Run 'watched' build in wylib:
  cd wylib
  npm run dev-build

- Run hot build in mychips:
  cd mychips
  npm run dev-hot

- Direct browser to port 3000 to get hot-loaded SPA
  Now changes in wylib or mychips SPA code should auto rebuild/reload

---------------------------------------------------------------------  
Example development environment settings:

  export LESS=eFRX		#For 'git diff' to work with colors
  export WYATTDB="$USER"	#Name of database you will be using
  export PATH="$PATH:$HOME/devel/wyseman/bin:$HOME/devel/mychips/bin"
  export NODE_PATH="$HOME/devel:/usr/lib/node_modules:./node_modules"
  export RUBYOPT="-I $HOME/devel/wyseman/lib -I $HOME/devel/mychips/lib"
  export RUBYLIB="$HOME/devel/js/wyseman/lib"
  
---------------------------------------------------------------------  
Testing:

- Run Mocha tests 		(This is done in a separate database)
  Can set NODE_DEBUG=debug (or trace) and observe logs in /var/tmp/mychips
  cd devel/mychips/test
  Adjust settings in test/settings.js for your environment

  npm test				#Or, separately:
  
  npm run test-peercom
  npm run test-impexp
  npm run test-peer

  dropdb mychipsTestDB			#When finished with tests
  
---------------------------------------------------------------------  
Other Notes:

- The MyCHIPs process contains multiple possible servers:
  User and admin SPA's served at http://localhost:8000
  Wysegi SPA served at http://localhost:8001
  User controller server at ws://localhost:43210
  Admin controller server at ws://localhost:54320
  Peer communications at localhost:65430

---------------------------------------------------------------------  
Legacy Ruby admin app:

- Create a user ticket
  mychips/bin/mc_admin ticket 10000 /tmp/ticket.json

---------------------------------------------------------------------  
