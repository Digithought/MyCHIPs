Instructions to demonstrate reference code so far. (Dec, 2017)

Notes:
This should work, but really only tests original ruby test code.
There is nothing in here yet to test the JS server.

On a linux machine:
- Have Postgres package installed
- Checkout wyseman, wyselib, wylib from assembla
- Adjust settings in mychips/setpath to reflect where things are installed
  I put everything in its own directory under a main folder called "devel"
  Source setpath in each shell you are using
  
- Follow setup notes in wyseman/README.pg (new)

- Build: database
  cd mychips/schema
  make all

- Sample config
  Edit sample/kickstart:
    mobi_inet is the address of the linux box (where the mobile app connects)
  Edit mychips/sample/org.json
  Edit mychips/sample/user.json

- Run sample/kickstart
  This will generate a ticket in mychips/tmp/ticket.json

- Launch mc_user (server to talk to mobile app)

- Initialize mobile connection:
  mc_mobi -c <users_cdi> ticket tmp/ticket.json

- Now you can connect to mc_user server securely:
  mc_mobi status		A dummy command, for now
  
- You can create a ticket manually (instead of in sample/kickstart) with:
  mc_admin ticket 10000 tmp/ticket.json true	(the "true" will display a QR code for the ticket)


-------------------------------------------------------------------------------
Setup notes for my macbook development machine:

- Install xquartz

- Install virtual box
- Create 64 bit linux VM
- Follow system build notes for mac/macbook.vlin.f25

- Follow setup notes in wyseman/README.pg (new)

- May have to uncomment proxy info in ~/.subversion/servers

Startup:
- cd into mychips source root
  . setpath
  cd schema
  make all
  
  mc_admin load doc/user.json
  mc_admin ticket 1001 tmp/ticket.json
