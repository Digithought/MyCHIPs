Instructions to demonstrate reference code. (Jun 2019)
Currently tested on a Fedora 29 linux machine using chrome as the browser:

- Install Postgres, as root:
  dnf install postgresql postgresql-server postgresql-devel postgresql-pltcl postgresql-contrib
  dnf install ruby rubygem-pg rubygem-tk	#If you plan to modify the schema
  su -l postgres -c initdb
  systemctl enable postgresql
  systemctl start postgresql
  su -l postgres -c 'createuser -d -s -r admin'

- Create a folder to work in:
  mkdir devel; cd devel			#For example

- checkout mychips (currently on bitbucket):
  git clone https://your-username@bitbucket.org/kylebateman/mychips.git
  cd mychips
  npm install				#Install all dependencies
  
  npm init				#Initialize local certificates

- Run mychips server:			#Run without peer socket on first launch
  npm run server -- -p 0		#to make sure database schema gets built

  npm run server			#Can run this way subsequently

  If you have trouble, set NODE_DEBUG=debug environment variable
  and watch logs in /var/tmp/mychips
  You can do limited testing running insecurely: npm run server -- -n

- Try connecting to the SPA (possibly from another machine):
  Direct your browser to:	https://<hostname>:8000/admin.html
                      or:	http://<hostname>:8000/admin.html
  
  If connecting over https, your browser should warn you of an insecure site.  
  For testing, you can just proceed anyway (at least in chrome).  
  See the file ./pki/README for more details about securing your site with an
  SSL certificate (whether you use a commercial certificate or make your own).
  
  If the connection is working, you should see an open connection dialog in the 
  upper right corner of the app.

- You will need a ticket to authorize the connection:
  cd test/sample
  ./adminticket <hostname> <port> ><ticket_file>	#Save the ticket to a file
  
  For example:
  ./adminticket 192.168.56.101 54320 >../tmp/admin.json		#or
  ./adminticket mychips.mydomain.com >../tmp/admin.json
  
  Make sure the host address matches what is on your certificate when using TLS
  otherwise you may not be able to connect.
  
- Use the "Import Keys:" option in the connection dialog to open the ticket file.
  You may also drag/drop your ticket file onto the Import button.
  
  Double click on the imported ticket to initiate your connection.
  You should now be prompted for your username (admin).
  The GUI should connect to the backend, and turn your ticket into a key.

  The system should next prompt you for a pass phrase.  This phrase will be used
  when storing your connection key in the browser local storage so others with
  access to your computer can't steal your key.  Leave it blank if you don't want
  to encrypt your key (bad idea in production environment).

  You should probably also export your key and save it in a safe place.  See the
  documentation in the wylib package for more information on connection keys.
  
- Now add some sample test data to the database:
  cd test
  edit settings file to set IP number of the test machine you are on
  cd sample
  ./kickstart
  Reload the user preview in the admin GUI, should see 5 users

- View the live network graph (Network tab)
  See your 5 users on the graph
  Use the graph menu (Upper Right) to Reset or Arrange if necessary

- Add sample tallies/chits (while watching the live Network display)
  Still in test/sample
  Specify database name only if not the same as your username (default)
  psql <Database_Name> admin -f tallies.sql
  psql <Database_Name> admin -f chits.sql
  
  Remove them again with
  psql <Database_Name> admin -c "delete from mychips.tallies"

- Add more random users (while still watching the graph)
  ./randuser					# or:
  ./randuser -n Number_of_Users_to_Add
  
  Press Arrange button (or hold it) in graph menu to arrange nodes better

- Launch the agent simulation model:
  cd test/sim
  ./agent
  
  You can watch as the user nodes will begin to form tallies with each other 
  and begin to trade chits over the tallies.
  
- Lifts
  When the graph accumulates some debits and credits, you can try executing
  some credit lifts.
  
  To examine the lift path table, execute this SQL:

  select * from mychips.paths_v_lifts  
  
  To run a single credit lift, execute this SQL:
  
  select mychips.lift_cycle(1)		-- Argument = max number of lifts

---------------------------------------------------------------------  
Want to browse the database schema:

- Launch the server with the -w switch:
  npm run server -- -w
  
- Direct your browser to:	https://<hostname>:8000/wysegi.html

---------------------------------------------------------------------  
If you will be working on wyseman source code:

- Remove mychips/node_modules/wyseman
  cd mychips/..				#Directory above mychips
  git clone https://github.com/gotchoices/wyseman.git
  npm install wyseman

- See wyseman/INSTALL for more installation details
  dnf install rubygem-pg rubygem-tk gcc-c++	;As root
  gem install json				;As you

---------------------------------------------------------------------  
If you will be working on the PostgreSQL schema:

- Remove mychips/node_modules/wyselib
  cd mychips/..
  git clone https://github.com/gotchoices/wyselib.git
  npm install wyselib

- You may have to drop your database, if it was created automatically

- Build schema in your database from sources:
  Set WYATTDB if you use a DB name different from your username
  cd mychips/schema
  make all

---------------------------------------------------------------------  
If you will be working on Wylib:

- Remove mychips/node_modules/wylib
  cd mychips/..
  git clone https://github.com/gotchoices/wylib.git
  npm install wylib
  
- Run 'watched' build in wylib:
  cd wylib
  npm run dev-build

- Run hot build in mychips:
  cd mychips
  npm run dev-hot

- Direct browser to port 3000 to get hot-loaded SPA
  Now changes in wylib or mychips SPA code should auto rebuild/reload
  This does not work well when testing/using wylib reports
  
  If you are testing reports, hot loading may not work so instead:
  - Use in mychips: npm run dev-build
  - And browse to port 8000

---------------------------------------------------------------------  
Testing:

- Run Mocha tests 		(This is done in a separate database)
  Can set NODE_DEBUG=debug (or trace) and observe logs in /var/tmp/mychips
  cd devel/mychips/test
  Adjust settings in test/settings.js for your environment

  npm test				#Or, separately:
  
  npm run test-peercom
  npm run test-impexp
  npm run test-peer

  dropdb mychipsTestDB			#When finished with tests
  
---------------------------------------------------------------------  
