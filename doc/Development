Instructions to demonstrate reference code. (Feb 2020)

Current testing limited to: 
Fedora linux, Chrome, Firefox, PostgreSQL 9-11, docker

---------------------------------------------------------------------
Docker Simulation

If you just want to run the docker network simulation, install Docker on your
machine and then get into mychips/test/sim and consult the file README.dock.

The docker simulation model was developed on MacOS but it should also be 
possible to run on a Linux host.

---------------------------------------------------------------------
To manually configure a Linux environment for testing the MyCHIPs server:

- Install Postgres, as root:
  dnf install postgresql postgresql-server postgresql-devel \
  	postgresql-pltcl postgresql-plpython postgresql-contrib
  dnf install ruby rubygem-pg rubygem-tk	#If you plan to modify the schema
  su -l postgres -c initdb
  systemctl enable postgresql
  systemctl start postgresql
  su -l postgres -c 'createuser -d -s -r admin'

- Other known dependencies that may not be installed on your system by default:
  bash, openssl, others?

- Create a folder to work in:
  mkdir devel; cd devel			#For example

- checkout mychips (currently on bitbucket):
  git clone https://your-username@bitbucket.org/kylebateman/mychips.git
  cd mychips
  npm install				#Install all dependencies
  
  npm init				#Initialize local certificates

- Create an admin login ticket		#This will also build the db schema
  npm run adminticket

- Run mychips server:
  npm run server

  If you have trouble, set NODE_DEBUG=debug environment variable
  and watch logs in /var/tmp/mychips
  You can do limited testing running insecurely: npm run server -- -n

- Try connecting to the SPA (possibly from another machine):
  Direct your browser to:	https://<hostname>:8000/admin.html
                      or:	http://<hostname>:8000/admin.html
  
  If connecting over https, your browser should warn you of an insecure site.  
  For testing, you can just proceed anyway (at least in chrome).  
  See the file ./pki/README for more details about securing your site with an
  SSL certificate (whether you use a commercial certificate or make your own).
  
  If the connection is working, you should see an open connection dialog in the 
  upper right corner of the app.

- You will need a ticket to initialize the connection.  In the step above, a
  ticket was created in (by default): test/local/admin.json.
  If it hasn't expired yet, you can use it now.
  
  Otherwise, you need to generate a new one so do that now:
  
  npm run adminticket -- -H hostname -P port -o ticket_file.json
  
  For example, something like:
  npm run adminticket -- -H 192.168.56.101 -o test/local/ticket.json	#or
  bin/adminticket mychips.mydomain.com -o test/tmp/ticket.json
  
  Make sure the host address matches what is on the spa certificate you built
  using the "npm run init" or "npm run cert" commands.  (See pki/README for
  more detailed info on this.)
  
- Use the "Import Keys:" option in the connection dialog to open the ticket file.
  You may also drag/drop your ticket file onto the Import button.
  
  Double click on the imported ticket to initiate your connection.
  You should now be prompted for your username (admin).  The username is purposely
  not included in the ticket file as a security measure.  The user has to know
  what user the ticket is intended for.
  
  If the ticket is recognized, the GUI should connect to the backend, and promote
  the ticket to a connection key.  Note, the token can only be used once and it
  expires fairly quickly.  If you fail to connect, you may have to issue a new
  ticket (which will automatically invalidate the previous one).

  The system should next prompt you for a pass phrase.  This phrase will be used
  when storing your connection key in the browser local storage so others with
  access to your computer can't steal your key.  Leave it blank if you don't want
  to encrypt your key (bad idea in a production environment).

  You should then also export your key and save it in a safe place.  You can
  use this same key in other browsers or to restore your connection if you lose
  or clear your local storage.  If you lose the admin key, you will have to 
  reissue a connection token using the procedure above.  The admin user can issue
  connection tokens for other users using the admin GUI.
  
  URL Tickets:
  It is now possible using the -Q switch to make adminticket produce a URL which
  you can connect to directly, eliminating the need to import a key file into the
  UI as described above.
  
  See the documentation in the wylib package for more detailed information on 
  connection keys.
  
- Now add some sample test data to the database:

    cd test
    
  Edit settings file to set IP number of the test machine you are on
  
    cd sample
    ./kickstart

  Reload the user preview in the admin GUI, should see 5 users.

- View the live network graph (Network tab)
  See your 5 users on the graph
  Use the graph menu (Upper Right) to Reset or Arrange if necessary

- Add sample tallies/chits (while watching the live Network display)
  Still in test/sample
  Specify database name only if not the same as your username (default)
  psql <Database_Name> admin -f tallies.sql
  psql <Database_Name> admin -f chits.sql
  
  Remove them again with
  psql <Database_Name> admin -c "delete from mychips.tallies"

- Add more random users (while still watching the graph)
  ./randuser					# or:
  ./randuser -n Number_of_Users_to_Add
  
  Press Arrange button (or hold it) in graph menu to arrange nodes better

- Launch the agent simulation model:
  cd test/sim
  ./agent
  
  You can watch as the user nodes will begin to form tallies with each other 
  and begin to trade chits over the tallies.
  
- Lifts
  When the graph accumulates some debits and credits, you can try executing
  some credit lifts.
  
  To examine the lift path table, execute this SQL:

  select * from mychips.paths_v_lifts  
  
  To run a single credit lift, execute this SQL:
  
  select mychips.lift_cycle(1)		-- Argument = max number of lifts

---------------------------------------------------------------------  
Want to browse the database schema:

- Launch the server with the -w switch:
  npm run server -- -w
  
- Direct your browser to:	https://<hostname>:8000/wysegi.html

You may want to monitor notice logging from postgres.  If so, you may
have to edit pgsql/data/postgresql.conf and set the following:

log_min_messages=notice

---------------------------------------------------------------------  
If you will be working on the Wyatt-ERP source code:

- You will need to run "npm develop" script.  This will remove the four Wyatt 
  modules out of mychips/node_modules.  It will expect to find those same 
  modules (wyseman, wylib, wyselib, wyclif) in a folder at the same level as 
  the mychips folder.  You will have to check these of from github, for
  example:

    git clone https://github.com/gotchoices/wyselib.git
  
  The develop script will run an "npm install" at that level (just above 
  mychips) which will build an npm_modules folder there and make the required 
  modules accessible to MyCHIPs.
  
  By doing it this way, you are able to edit/change things in the Wyatt code
  and the changes will be immediately accessible to the next run of MyCHIPs.

---------------------------------------------------------------------  
  If you are editing the database schema, you will likely need the following 
  package installations:

    dnf install rubygem-pg rubygem-tk gcc-c++
    gem install json
  
  See wyseman/INSTALL for more installation details

- To build/rebuild the schema in your database from sources:
  cd mychips/schema
  make all
  
  This may fail on the first run if your schema was instantiated by MyCHIPs
  (as opposed to this manual build method).

---------------------------------------------------------------------  
If you will be working on Wylib:

- Check out the wylib source (if not already done):
    git clone https://github.com/gotchoices/wylib.git
    
- Run the "npm develop" script as noted above.
  
- Run a 'watched' build in wylib:
  cd wylib
  npm run dev-build

- Run a similar build in mychips:
  cd mychips
  npm run dev-build

- Any changes you make in either the wylib source, or the MyCHIPs source
  will be detected and the packges will be automatically rebuilt.  You can
  just reload your browser to grab the latest changes to the SPA.
  
  If you are making changes to the server side code, you will have to
  restart that manually.
  
  It is also possible to run "npm run dev-hot" in the mychips directory.
  This allows you to run the SPA out of port 3000 (rather than 8000).  This
  may not work right if you are working on wylib reports.

---------------------------------------------------------------------  
Testing:

- Run Mocha tests 		(This is done in a separate database)
  Can set NODE_DEBUG=debug (or trace) and observe logs in /var/tmp/mychips
  cd devel/mychips/test
  Adjust settings in test/settings.js for your environment

  npm test				#Or, separately:
  
  npm run test-peercom
  npm run test-impexp
  npm run test-peer

  dropdb mychipsTestDB			#When finished with tests
  
---------------------------------------------------------------------  
