@startuml
!include common.puml

$title(Route Discovery States)
[*] --> void
state "No Route" as void

'States are determined by a combination of values, as defined here:
draft: Stat: draft, time: N/A
pend: Stat: pend, time: OK
state liftupd {
  good: Stat: good, time: OK
  stale: Stat: good, time: expired
}
state tryable {
  none: Stat: none, time: N/A
  timeout: Stat: pend, time: expired
  unknown: Stat: pend, time: expired, tries: max
}

'State transition rules:
void -left[$peer]-> [*]: $trans($peer,Receive Act:query,'Route impossible',Reply Act: fail)
void -left[$peer]-> [*]: $trans($peer,Receive Act:query,'Peer found locally',Reply Act: affirm)

void -right[$user]-> draft: $trans($user,User initiates route,'',Create new route)
void -right[$peer]-> draft: $trans($peer,Receive Act:query,'Peer not found locally',Create draft route)
void -right-> draft: $trans(cron,Agent initiates route,'',Create new route)

draft -[$db]-> pend: $trans($db,draft detected,'',Forward Upstream Act:query)

pend -[$peer]-> good: $trans($peer,Receive Act:affirm,'',Relay Downstream Act:affirm)
pend --> timeout: $trans(timer,Request times out,'')
pend -[$peer]-> none: $trans($peer,Receive Act:fail,Relay Downstream Act:fail)

good --> stale: $trans(timer,Time runs out,'')
liftupd --> good: $trans(db,Lift succeeds using this route,Refresh timestamp)
liftupd --> none: $trans(db,Lift fails using this route)

tryable -[$peer]-> draft: $trans($peer,Receive Act: query,Peer not found locally,Create draft route)
timeout --> unknown: $trans(Tries,Max retries reached)

@enduml
