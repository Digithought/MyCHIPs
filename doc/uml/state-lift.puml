@startuml
!include common.puml

$title(Lift States)
state "draft.init" as draftInit
state "init.seek" as initSeek
state "seek.exec" as seekExec
state resolvable {
  state exec
  state part
}

draftInit: Status: draft, Request: init
initSeek: Status: init, Request: seek
seekExec: Status: seek, Request: exec
exec:  Status: exec, Request: null
good:  Status: good, Request: null
part:  Status: part, Request: null
void:  Status: void, Request: null

'State transition rules:
[*] -[$user]-> draftInit: $trans($user,User initiates linear lift\nRequest:init,'')
[*] --> draftInit: $trans(Agent,Automaton initiates circular lift\nRequest:init,'')
draftInit -[$db]-> void: $trans($db, init detected, 'Lift/signature invalid', Disable payment record)
draftInit -[$db]-> initSeek: $trans($db, init detected, 'Payor signature good', Agent signs lift)
initSeek -[$db]-> seekExec: $trans($db, seek detected, Delegate to chipNet, 'Upon plan discovery,\nproceed to:')
initSeek -[$db]-> void: $trans($db, seek detected, Delegated to chipNet, 'Discovery timed out')
initSeek --> good: $trans(Trigger, seek detected, Inernal lift possible, Lift executed locally)

seekExec -[$db]-> exec: $trans($db, exec detected, DB/User selected plan, chipNet has initiated lift)
seekExec -[$db]-> void: $trans($db, exec detected, chipNet fails to initiate lift)

[*] -[$peer]-> part: $trans($peer, chipNet requests promise, 'Create lift, draft chits')

resolvable -[$peer]-> good: $trans($peer, chipNet confirms good, Verified Valid, Commit lift chits; Consense)
resolvable -[$peer]-> void: $trans($peer, chipNet confirms failed, Verified Void, Mark lift as void)

@enduml
