#Schema for storing MyCHIPs tallies
#Copyright MyCHIPs.org; See license in root of this package
#----------------------------------------------------------------
# Note: Users bind themselves to a tally by signing the tally digest hash.  This hash
# is produced by casting the jsonb form of the record to text and then bytea prior to
# processing by the sha256 function.  If the json properties are not rendered in the
# same order every time, we will have a problem.  At the moment, properties are ordered
# by length first and then alphabetically.  If PostgreSQL ever changes this, we may
# need our own dedicated casting function.
#
#TODO:
#- Disable user from setting request to close directly (must use settings chit instead)
#- Implement and test user setting new agent on established tally
#- 
module mychips
require config.tcl trigview.tcl

namespace eval tallies {
    def tallies_pk	{tally_ent tally_seq}
    def tallies_v_up	{tally_type comment contract hold_terms part_terms target reward clutch bound hold_cert part_sig hold_sig request}
    def tallies_v_in	[concat tally_ent $tallies_v_up tally_uuid version part_ent part_cert]
    def tallies_se	[concat $tallies_v_in tally_seq status revision digest net_pc net_c tally_date hold_cid hold_agent part_cid part_agent hold_sets part_sets chain_conf chain_stat $glob::stampfn]
    def tallies_v_up_mo	{hold_sig request}
}

other tally_side {} {
  create type tally_side as enum ('stock','foil');
} {drop type tally_side}

table mychips.tallies {mychips mychips.users tally_side} {
    tally_ent	text		references mychips.users on update cascade on delete cascade
  , tally_seq	int	      , primary key (tally_ent, tally_seq)

-- Values directly contained in the external tally representation
  , tally_uuid	uuid		not null
  , tally_type	tally_side	not null default 'stock'
  , tally_date	timestamptz(3)	not null default current_timestamp
  , version	int		not null default 1 constraint "!mychips.tallies:VER" check (version > 0)
  , revision	int		not null default 1 constraint "!mychips.tallies:REV" check (revision > 0)
  , comment	text
  , contract	jsonb		constraint "!mychips.tallies:TCM" check (not (status = 'open' and contract isnull))
  , hold_cert	jsonb		constraint "!mychips.tallies:UCM" check (not (status = 'open' and hold_cert isnull))
  , part_cert	jsonb		constraint "!mychips.tallies:PCM" check (not (status = 'open' and part_cert isnull))
  , hold_sig	text		constraint "!mychips.tallies:USM" check (not (status = 'open' and hold_sig isnull))
  , part_sig	text		constraint "!mychips.tallies:PSM" check (not (status = 'open' and part_sig isnull))
  , hold_terms	jsonb		not null default '{}'			-- Terms we grant to our partner
  , part_terms	jsonb		not null default '{}'			-- Terms partner grants to our holder
  , digest	bytea
--  			      , constraint "!mychips.tallies:TNU" unique(tally_type, tally_uuid) -- see unique index below

-- Values settable by the holder, cached version of latest applicable settings chit
  , target	bigint		not null default 0 constraint "!mychips.tallies:TGT" check (target >= 0 and target <= bound)
  , bound	bigint		not null default 0 constraint "!mychips.tallies:BND" check (bound >= 0)
  , reward	float		not null default 0 constraint "!mychips.tallies:RWD" check (reward >= -1 and reward <= 1)
  , clutch	float		not null default 0 constraint "!mychips.tallies:CLT" check (clutch >= -1 and clutch <= 1)
  			      , constraint "!mychips.tallies:RCV" check (reward + clutch >= 0)

-- Values used internally to track state, required actions
  , request	text		constraint "!mychips.tallies:IVR" check(request is null or request in ('void','draft','offer','open'))
  , status	text		not null default 'draft'
  				constraint "!mychips.tallies:IVS" check(status in ('void','draft','offer','open','close'))
  , closing	boolean		not null default false
  , part_ent	text		references mychips.users on update cascade on delete restrict
  				constraint "!mychips.tallies:NSP" check (part_ent != tally_ent)
  , net_c	bigint		default 0 not null
  , net_pc	bigint		default 0 not null
  , hold_cid	text		constraint "!mychips.tallies:UCI" check (not (status = 'open' and hold_cid isnull))
  , part_cid	text		constraint "!mychips.tallies:PCI" check (not (status = 'open' and part_cid isnull))
  , hold_agent	text		references mychips.agents on update restrict on delete restrict
  				constraint "!mychips.tallies:UAI" check (not (status = 'open' and hold_agent isnull))
  , part_agent	text		references mychips.agents on update restrict on delete restrict
  				constraint "!mychips.tallies:PAI" check (not (status = 'open' and part_agent isnull))
  , hold_sets	jsonb		not null default '{}'
  , part_sets	jsonb		not null default '{}'
  , chain_conf	int		-- not null default 0
  , chain_stat	text		not null default 'non' check (chain_stat in ('non','aff','pen','con','err'))
  , _last_chit	int		not null default 0

    eval(s $glob::stamps)
}
index {} mychips.tallies tally_date

index {"!mychips.tallies:TNU"} mychips.tallies {
  create unique index "!mychips.tallies:TNU"
  on mychips.tallies (tally_type, tally_uuid) where status in ('open','close')	-- Constraint only for active tallies
} {drop index if exists mychips."!mychips.tallies:TNU"}

table mychips.tally_tries {mychips.tallies} {
    ttry_ent	text	      , primary key (ttry_ent, ttry_seq)
  , ttry_seq	int	      , foreign key (ttry_ent, ttry_seq) references mychips.tallies on update cascade on delete cascade
  , tries	int		not null default 1
  , last	timestamptz	not null default current_timestamp
}

# Generate unique sequence number for new tallies
#----------------------------------------------------------------
function mychips.tallies_tf_seq() {mychips.users mychips.tally_certs(mychips.tallies) mychips.user_cert(text) mychips.j2h(jsonb) mychips.tally_json(mychips.tallies) mychips.contracts_v} {
  returns trigger language plpgsql security definer as $$
    begin
        if new.tally_ent is null then
          new.tally_ent = base.user_id(session_user);
        end if;
        if new.tally_seq is null then
          update mychips.users set _last_tally = greatest(
              coalesce(_last_tally, 0) + 1,
              (select coalesce(max(tally_seq),0)+1 from mychips.tallies where tally_ent = new.tally_ent)
            ) where user_ent = new.tally_ent
              returning _last_tally into new.tally_seq;
          if not found then new.tally_seq = 1; end if;
-- select into new.tally_seq coalesce(max(tally_seq),0)+1 from mychips.tallies where tally_ent = new.tally_ent; -- Not safe for concurrent sessions
        end if;
        if new.tally_uuid is null then
          new.tally_uuid = uuid_generate_v4();
        end if;

        if new.hold_cert is null then
          new.hold_cert = mychips.user_cert(new.tally_ent);
        end if;
        if new.contract is null then
          select into new.contract to_jsonb(rid) from mychips.contracts_v
            where host = 'mychips.org' and name = 'Tally_Contract' and language = 'eng' order by version desc limit 1;
        end if;
        new = mychips.tally_certs(new);
        if new.status = 'open' then	-- Should only happen in simulations
          new.digest = mychips.j2h(mychips.tally_json(new));
        end if;
        new.bound = greatest(new.target, new.bound);
        return new;
    end;
$$;}
trigger mychips_tallies_tr_seq {} {
    before insert on mychips.tallies for each row execute procedure mychips.tallies_tf_seq();
}

# Before updating each tally record
#----------------------------------------------------------------
function mychips.tallies_tf_bu() {mychips.user_cert(text) mychips.tally_certs(mychips.tallies) mychips.j2h(jsonb)} {
  returns trigger language plpgsql security definer as $$
    begin
      if new.request notnull then		-- check for legal state transition requests
        if old.status in ('void', 'draft', 'offer') and new.request in ('void','draft','offer') then
          null;
        elsif old.status in ('offer','open') and new.request = 'open' and new.hold_sig notnull and new.part_sig notnull then
          null;
        else
          raise exception '!mychips.tallies:ISR % %', old.status, new.request;
        end if;
      end if;

      if new.hold_cert isnull then
        new.hold_cert = mychips.user_cert(new.tally_ent);
      end if;
      if eval(difflist hold_cert part_cert) then	-- re-cache certificate info
        new = mychips.tally_certs(new);
      end if;
      
-- raise notice 'TPU: %:% %->%', old.tally_ent, old.tally_seq, old.status, new.status;
      if new.status != old.status then			-- Check for valid state transitions
        if old.status = 'offer' and new.status = 'open' then
          new.digest = mychips.j2h(mychips.tally_json(new));	-- Generate record digest
          new.hold_sets = new.hold_terms;			-- Default settings
          new.part_sets = new.part_terms;
        elsif old.status = 'offer' and new.status = 'draft' then
          new.hold_sig = null;					-- Redrafting, clear signatures
          new.part_sig = null;
        elsif old.status in ('void','draft','offer') and new.status in ('draft','void','offer') then
          null;
        elsif old.status = 'open' and new.status = 'close' then
          null;
        else
          raise exception '!mychips.tallies:IST % %', old.status, new.status;
        end if;

      end if;
      new.bound = greatest(new.target, new.bound);
      return new;
    end;
$$;}
trigger mychips_tallies_tr_bu {} {
    before update on mychips.tallies for each row execute procedure mychips.tallies_tf_bu();
}

# Check/cache info from the user and partner certificates
#----------------------------------------------------------------
function {mychips.tally_certs(ta mychips.tallies)} {mychips.tallies mychips.agents mychips.user_cert(text)} {
  returns mychips.tallies language plpgsql security definer as $$
    declare
      hchad jsonb; pchad jsonb; c jsonb;
    begin
--raise notice 'tally check:% %', ta.hold_cert, ta.part_cert;
      hchad = ta.hold_cert->'chad';
      pchad = ta.part_cert->'chad';
      ta.hold_cid   = hchad->>'cid';		-- Cache commonly used properties
      ta.hold_agent = hchad->>'agent';
      ta.part_cid   = pchad->>'cid';
      ta.part_agent = pchad->>'agent';
--raise notice 'Tally check:% %', ta.hold_agent, ta.part_agent;
      foreach c in array array[ hchad, pchad ] loop
        if (c->>'agent') notnull and not exists (select agent from mychips.agents where agent = c->>'agent') then
          insert into mychips.agents (agent, agent_host, agent_port) values (c->>'agent', c->>'host', (c->'port')::int);
        end if;
      end loop;

-- Is our partner also a local user?
      select into ta.part_ent user_ent from mychips.users_v where peer_cid = ta.part_cid and peer_agent = ta.part_agent;
      return ta;
    end;
$$;}

# Notify the peer server process of user next-state requests, that need attention
#----------------------------------------------------------------
function {mychips.tally_notify_agent(tally mychips.tallies)} {mychips.tallies_v mychips.users_v mychips.tally_tries} {
  returns boolean language plpgsql security definer as $$
    declare
        jrec	jsonb;			-- Notify payload
        trec	record;			-- Tally
        rrec	record;			-- Retries
        channel	text = 'mychips_agent';
    begin				-- Determine next action
--raise notice 'TN:% % %', tally.tally_ent, tally.status, tally.request;
        select into trec hold_agent,hold_chad,part_chad,json from mychips.tallies_v where tally_ent = tally.tally_ent and tally_seq = tally.tally_seq;
        if not trec.hold_agent is null then
            channel = 'ma_' || trec.hold_agent;
        end if;

        insert into mychips.tally_tries (ttry_ent, ttry_seq) values (tally.tally_ent, tally.tally_seq)
          on conflict (ttry_ent,ttry_seq) do update set tries = mychips.tally_tries.tries + 1, last = current_timestamp
            returning * into rrec;
-- raise notice 'Try:%-%', tally.tally_ent, tally.tally_seq;
--raise notice 'Tn c:% t:% f:%', channel, trec.part_chad, trec.hold_chad;
        jrec = jsonb_build_object(
          'target',	'tally',
          'action',	tally.request,
          'try',	rrec.tries,
          'last',	rrec.last,
          'to',		trec.part_chad,
          'from',	trec.hold_chad,
          'object',	trec.json
        );
--raise notice 'Tally notice:% % %', channel, tally.request, trec.json->'uuid';
        perform pg_notify(channel, jrec::text);			-- Notify peer server of next state action request
        return true;
    end;
$$;}

# Generate notifications about updated tallies for listening peer servers
#----------------------------------------------------------------
function mychips.tallies_tf_notify() {mychips.tally_notify_agent(mychips.tallies) mychips.route_circuit(text,int)} {
  returns trigger language plpgsql security definer as $$
    declare
      notify	boolean default false;
    begin
      if TG_OP = 'INSERT' and not new.request isnull then
        notify = true;
      else			-- This is an update
        if not new.request isnull and new.request is distinct from old.request then
          notify = true;
        end if;
        if new.request is null and new.status = 'open' and old.status != 'open' then
          if base.parm_boolean('routes', 'autoquery') then
            perform mychips.route_circuit(new.tally_ent, new.tally_seq);		-- New tally; query for applicable route circuit info
          end if;
        end if;
      end if;
      if notify then perform mychips.tally_notify_agent(new); end if;
      return new;
    end;
$$;}
trigger mychips_tallies_tr_notice {} {
    after insert or update on mychips.tallies for each row execute procedure mychips.tallies_tf_notify();
}

# Compute standard json output for a tally
#----------------------------------------------------------------
function {mychips.tally_json(te mychips.tallies)} {mychips.tallies} {
  returns jsonb stable language sql as $$
    select jsonb_build_object(
       'version',	te.version,
       'revision',	te.revision,
       'uuid',		te.tally_uuid,
       'date',		te.tally_date,
       'memo',		te.comment,
       'agree',		te.contract,
       te.tally_type,	json_build_object(
         'cert',	te.hold_cert,
         'terms',	te.hold_terms
       ),
       case when te.tally_type = 'stock' then 'foil' else 'stock' end, json_build_object(
         'cert',	te.part_cert,
         'terms',	te.part_terms
       )
    )
$$;} -grant mychips

# Compute current state of a tally, based on its various fields
#----------------------------------------------------------------
function {mychips.tally_state(t mychips.tallies)} {mychips.tallies} {
  returns text immutable language plpgsql as $$
    begin return
      case
        when t.request notnull then ''
        when t.status = 'offer' then
          case
            when t.hold_sig notnull and t.part_sig notnull then	'B.'
            when t.hold_sig notnull and t.part_sig isnull then	'H.'
            when t.hold_sig isnull  and t.part_sig notnull then	'P.'
            else ''
          end
        when t.status = 'draft' then
          case when t.part_cert isnull then '' else 'P.' end
        when t.status = 'open' then
          case when t.closing then 'C.' else '' end
        else ''
      end ||
      t.status ||
      case when t.request isnull then '' else '.' || t.request end;
    end;
$$;} -grant mychips

# Base view of tallies
#----------------------------------------------------------------
#define uSign {case when te.tally_type = 'stock' then (%1) else -(%1) end}
view mychips.tallies_v {
  mychips.tallies mychips.chits_v mychips.users_v mychips.agents_v 
  mychips.tally_state(mychips.tallies) 
  mychips.tally_json(mychips.tallies)
  mychips.ba2b64v(bytea)
  mychips.j2h(jsonb)
} {select 
    eval(fld_list $tallies::tallies_se	te)
  , jsonb_build_object('cid', te.hold_cid) || ua.json as hold_chad
  , ua.agent_host			as hold_host
  , ua.agent_port			as hold_port
--  , te.hold_cid ||':'|| ua.atsock	as hold_full

  , te.part_cid ||':'|| pa.agent	as part_addr
  , jsonb_build_object('cid', te.part_cid) || pa.json as part_chad
  , pa.agent_host			as part_host
  , pa.agent_port			as part_port
--  , te.part_cid ||':'|| pa.atsock	as part_full
  
  , not te.part_ent is null						as inside
  , mychips.tally_state(te)		as state
  , mychips.tally_state(te) = any(array['P.offer','P.draft']) as action
  , te.status = 'open'					as liftable

  , coalesce(cg.chits, 0)				as chits
  , coalesce(cg.chits, 0) + coalesce(ce.chits, 0)	as chits_p

  , coalesce(cg.net, 0)					as net
  , coalesce(cg.net, 0) + coalesce(ce.net, 0)		as net_p
  
  , greatest(cg.latest, te.mod_date)			as latest
  
  , mychips.tally_json(te) as json_core
  , mychips.tally_json(te) || jsonb_build_object(
      'sign',		json_build_object(
        'hash',		mychips.ba2b64v(te.digest),
        'stock',	case when te.tally_type = 'stock' then te.hold_sig else te.part_sig end,
        'foil',		case when te.tally_type = 'stock' then te.part_sig else te.hold_sig end
      )
    )		as json
  , mychips.j2h(mychips.tally_json(te)) as digest_v
  , mychips.j2h(mychips.tally_json(te)) = coalesce(te.digest,'') as clean
  , jsonb_build_object(
      'target',		te.target,
      'reward',		te.reward,
      'clutch',		te.clutch,
      'bound',		te.bound
    )		as policy
  , mychips.ba2b64v(cc.digest)		as ack_hash

    from	mychips.tallies	te
    left join	mychips.agents_v ua on ua.agent = te.hold_agent
    left join	mychips.agents_v pa on pa.agent = te.part_agent
    left join	(select chit_ent, chit_seq,
         sum(net) as net, count(chit_idx) as chits, max(mod_date) as latest
         from mychips.chits_v where status = 'good' and chit_type != 'set' group by 1,2
       ) cg on cg.chit_ent = te.tally_ent and cg.chit_seq = te.tally_seq
    left join	(select chit_ent, chit_seq,
         sum(net) as net, count(chit_idx) as chits, max(mod_date) as latest
         from mychips.chits_v where status = 'pend' and chit_type != 'set' group by 1,2
       ) ce on ce.chit_ent = te.tally_ent and ce.chit_seq = te.tally_seq
    left join	(select chit_ent,chit_seq,chain_idx,digest from mychips.chits_v where status = 'good'
       ) cc on cc.chit_ent = te.tally_ent and cc.chit_seq = te.tally_seq
         and cc.chain_idx = te.chain_conf;

    eval(trigview::insert mychips.tallies_v mychips.tallies $tallies::tallies_v_in $tallies::tallies_pk [concat $glob::stampin]);
} -native {
  {mychips.tallies status digest mod_date}
  {mychips.tallies_v json}
}

# Custom update function; Only allow updates of regular fields for draft tally
#----------------------------------------------------------------
define updEnd {
  where eval(fld_list_eq $tallies::tallies_pk old { and })
    returning eval(join $tallies::tallies_pk ,) into eval(fld_list $tallies::tallies_pk new)
}
function {mychips.tallies_v_updfunc()} {mychips.tallies_v} {
 returns trigger language plpgsql security definer as $$
  begin
    if old.status = 'draft' then
      update mychips.tallies set eval(trigview::upfields $tallies::tallies_v_up $glob::stampin) updEnd();
    elsif old.status = 'offer' then
      update mychips.tallies set eval(trigview::upfields $tallies::tallies_v_up_mo $glob::stampin) updEnd();
    end if;
    select into new * from mychips.tallies_v where tally_ent = new.tally_ent and tally_seq = new.tally_seq;
    return new;
  end;
$$;}
trigger mychips_tallies_v_tr_upd {} {
    instead of update on mychips.tallies_v for each row execute procedure mychips.tallies_v_updfunc();
}

# User view of tallies
#----------------------------------------------------------------
view mychips.tallies_v_me {mychips.tallies_v base.user_id(text)} {select 
    t.*
    from	mychips.tallies_v t
    where	t.tally_ent = base.user_id(session_user);

    eval(rule_delete mychips.tallies_v_me mychips.tallies $tallies::tallies_pk {old.status = 'draft'});
} -grant {
    {tally	{s} {s i u} {d}}
} -native {
  {mychips.tallies_v json}
}

# General routine to build update query string
#----------------------------------------------------------------
function {mychips.state_updater(recipe jsonb, tab text, fields text[], qflds text[] default null)} {mychips} {
  returns text immutable language plpgsql as $$
    declare
      lrec	record;		-- Looping variable
    begin
      if qflds is null then
        qflds = '{"request = null", "mod_date = current_timestamp", "mod_by = session_user"}';
      end if;
      for lrec in select * from jsonb_each_text(recipe->'update') loop
-- raise notice '  update set % = %', lrec.key, lrec.value;
        if lrec.key = any(fields) then		-- update only allowable fields
          qflds = qflds || (quote_ident(lrec.key) || ' = ' || quote_nullable(lrec.value));
        end if;
      end loop;
      return 'update ' || tab || ' set ' || array_to_string(qflds,', ') || ' where ';
    end;
$$;}

# Process tally state transitions requested by the peer server process
#----------------------------------------------------------------
function {mychips.tally_process(msg jsonb, recipe jsonb)} {mychips.tallies_v mychips.users_v} {
  returns jsonb language plpgsql as $$
    declare
      cid	text = msg->'to'->>'cid';
      agent	text = msg->'to'->>'agent';
      obj	jsonb = msg->'object';
      uuid	uuid = obj->>'uuid';
      hold	jsonb = obj->'stock';	-- assume our guy is the stock holder
      part	jsonb = obj->'foil';
      curState	text;
      qstrg	text;			-- Temporary string
      uid	text;			-- Our user/holder
      trec	record;			-- Holds tally record(s)
      jrec	jsonb;			-- Notify payload
      acted	boolean = (recipe ? 'notify');
      tallyType tally_side = 'stock';
      notType	tally_side = 'foil';
    begin
--raise notice 'Tally cid:% uuid:%', cid, uuid;
      select into trec tally_ent, tally_seq, state from mychips.tallies_v where hold_cid = cid and tally_uuid = uuid;
        
--raise notice 'Tally cid:% entity:% recipe:%', cid, trec.tally_ent, recipe;
      if not found then			-- No existing tally
        curState = 'null';			-- Special code for when the tally doesn't exist yet
        select into uid id from mychips.users_v where peer_cid = cid and peer_agent = agent;		-- Look up the entity on our own
        if not found then return null; end if;
      else
        curState = trec.state;
        uid = trec.tally_ent;			-- Will need to enter new tally
      end if;

      if not (jsonb_build_array(curState) <@ (recipe->'context')) then	--Not in any applicable state (listed in our recipe context)
--raise notice 'Z:% C:%', jsonb_build_array(curState), recipe->'context';
        if curState != 'null' and (recipe->'clear')::boolean then	-- Clear local request on failure
          update mychips.tallies set request = null where tally_ent = trec.tally_ent and tally_seq = trec.tally_seq;
        end if;
        return to_jsonb(curState);
      end if;

      if recipe ? 'upsert' then		-- If inserting/updating from object
--raise notice '  upsert obj:% curState:%', obj, curState;
        if part->'cert'->'chad'->>'cid' = cid and part->'cert'->'chad'->>'agent' = agent then
          tallyType = 'foil';			-- Our side really is the foil
          notType = 'stock';
          hold	= obj->'foil';
          part	= obj->'stock';
        elsif hold->'cert'->'chad'->>'cid' != cid or hold->'cert'->'chad'->>'agent' != agent then
          return null;				-- Can't find our entity as stock or foil
        end if;

--raise notice '  tallyType:% notType:%', tallyType, notType;
        if curState = 'null' then			-- Will need to do insert
          insert into mychips.tallies (
            tally_ent,tally_uuid,tally_type,tally_date,version,contract,status,comment,
            hold_sig,part_sig,hold_terms,part_terms,hold_cert,part_cert,chain_conf
          ) values (
            uid, uuid, tallyType, (obj->>'date')::timestamptz, (obj->>'version')::int, 
            obj->'agree', coalesce(recipe->'upsert'->>'status','offer'),
            obj->>'memo', obj->'sign'->>(tallyType::text), obj->'sign'->>(notType::text), 
            hold->'terms', part->'terms', hold->'cert', part->'cert', (recipe->'upsert'->'chain_conf')::int
          ) returning tally_ent, tally_seq into trec;
        else						-- Tally already exists, do an update
          update mychips.tallies set request = null, mod_date = current_timestamp, mod_by = session_user,
            status = coalesce(recipe->'upsert'->>'status','offer'), tally_type = tallyType,
            version = (obj->>'version')::int, revision = (obj->>'revision')::int, 
            contract = obj->'agree', comment = obj->>'memo',
            hold_sig = obj->'sign'->>(tallyType::text), part_sig = obj->'sign'->>(notType::text),
            hold_terms = hold->'terms', part_terms = part->'terms',
            hold_cert = hold->'cert', part_cert = part->'cert', chain_conf = (recipe->'upsert'->'chain_conf')::int
          where tally_ent = trec.tally_ent and tally_seq = trec.tally_seq;
        end if;
        acted = true;
      end if;

      if recipe ? 'update' then			-- There's an update key in the recipe
        qstrg = mychips.state_updater(recipe, 'mychips.tallies', '{status, revision, part_cert, part_sig, hold_sig}');
--raise notice 'SQL:%', qstrg;
        execute qstrg || ' tally_ent = $1 and tally_seq = $2' using trec.tally_ent, trec.tally_seq;
        acted = true;
      end if;

      if not acted then		-- Don't proceed if we didn't do anything
        return null;
      end if; 

--raise notice 'Clear:%-%', trec.tally_ent, trec.tally_seq;
      delete from mychips.tally_tries where ttry_ent = trec.tally_ent and ttry_seq = trec.tally_seq;

--raise notice '  At end, tally % %', trec.tally_ent, trec.tally_seq;
      trec = mychips.tally_notify_user(trec.tally_ent, trec.tally_seq, msg->>'action');
      return jsonb_build_object(
        'status',	trec.status,
        'object',	trec.json
      );
    end;
$$;}

# Notify the user of relevant state changes on tallies
#----------------------------------------------------------------
function {mychips.tally_notify_user(ent text, seq int, reason text = 'valid')} {mychips.tallies_v} {
  returns record language plpgsql as $$
    declare
      trec	record;
      jrec	jsonb;
    begin
      select into trec tally_ent,tally_seq,state,status,action,json from mychips.tallies_v where tally_ent = ent and tally_seq = seq;
--raise notice 'Tally user notify: mu_% %', trec.tally_ent, trec.json->'uuid';
      jrec = jsonb_build_object(
        'target',	'tally',
        'entity',	trec.tally_ent,
        'sequence',	trec.tally_seq,
        'action',	trec.action,
        'state',	trec.state,
        'object',	trec.json,
        'reason',	reason
      );
      perform pg_notify('mu_' || trec.tally_ent, jrec::text);
      perform pg_notify('mychips_user', jrec::text);		-- Simulations use this
      return trec;
    end;
$$;}

# Check for any lingering, unprocessed notices
# A peer server should call this on launch to become aware of any activity it has missed
#----------------------------------------------------------------
function {mychips.tally_notices()} {mychips.tallies mychips.tally_tries mychips.chits base.parm_int(text,text) mychips.chit_notify_agent(mychips.chits)} {
  returns int language plpgsql as $$
    declare
        trec		mychips.tallies;
        crec		mychips.chits;
        didem		int = 0;
        min_min		int = coalesce(base.parm_int('agents','min_time'), 60);
        min_time	interval = (min_min::text || ' minutes')::interval;
    begin
        for trec in select * from mychips.tallies ta	-- tokens stale by peer_min_time
          join mychips.tally_tries tr on tr.ttry_ent = ta.tally_ent and tr.ttry_seq = ta.tally_seq
          where ta.request is not null and (current_timestamp - tr.last) >= min_time loop
            perform mychips.tally_notify_agent(trec);
            didem = didem + 1;
        end loop;

        for crec in select * from mychips.chits ch
          join mychips.chit_tries ct on ct.ctry_ent = ch.chit_ent and ct.ctry_seq = ch.chit_seq and ct.ctry_idx = ch.chit_idx
          where ch.request is not null and (current_timestamp - ct.last) >= min_time loop
            perform mychips.chit_notify_agent(crec);
            didem = didem + 1;
        end loop;
        return didem;
    end;
$$;}

# Generate notifications about new or updated tallies for listening admin servers
#----------------------------------------------------------------
function mychips.tallies_tf_change() {mychips} {
  returns trigger language plpgsql security definer as $$
    begin
-- raise notice 'Admin tallies notify:%', TG_OP;
      perform pg_notify('mychips_admin', format('{"target":"tallies", "oper":"%s", "time":"%s"}', TG_OP, transaction_timestamp()::text));
      return null;
    end;
$$;}
trigger mychips_tallies_tr_change {} {
    after insert or update or delete on mychips.tallies for each statement execute procedure mychips.tallies_tf_change();
}
