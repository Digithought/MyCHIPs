#Schema for storing MyCHIPs tallies
#Copyright MyCHIPs.org; See license in root of this package
#----------------------------------------------------------------
#TODO:
#X- Totals should include only valid, open chits; can't draw from chits_v without recursion loop in wyseman
#X- Rename host_id to serv_id? (Host sounds more like the service provider rather than the traffic server instance)
#- See Fixme's below
#- Include serv_id in tally_v to reduce queries in notice triggers?
#- Add constraints to assure things like contract and signatures are valid?
#- Make request tags mirror states better (more like in chits.wms)
#- Harden views; Can only update unsigned, working tally
#- 
module mychips
require config.tcl trigview.tcl

namespace eval tallies {
#    def tallies_pk	{tally_ent tally_seq}
#    def tallies_v_up	{request comment}
#    def tallies_v_in	[concat tally_ent $tallies_v_up tally_guid tally_type version partner contract user_sig]
    def tallies_se	[concat tally_ent tally_seq tally_type tally_guid tally_date version partner request comment contract target lift_marg drop_marg lift_max drop_max status units_c cr_limit dr_limit $glob::stampfn]
}

table mychips.tallies {mychips mychips.users mychips.peers} {
    tally_ent	text		references mychips.users on update cascade on delete cascade
  , tally_seq	int	      , primary key (tally_ent, tally_seq)
  , tally_guid	uuid		not null
  , tally_type	text		not null default 'stock' check(tally_type in ('stock','foil'))
  , tally_date	timestamptz	not null default current_timestamp
  , version	int		not null default 1 constraint "!mychips.tallies.VER" check (version > 0)
  , partner	text		not null references mychips.peers on update cascade on delete restrict
  				check (partner != tally_ent)
  			      , unique(tally_ent, partner, tally_type, tally_guid)
  , status	text		not null default 'void' check(status in ('void','draft','open','close'))
  , request	text		check(request is null or request in ('void','draft','open','close'))
  , comment	text
  , user_sig	text		
  , part_sig	text
  , contract	jsonb		-- not null Fixme:add back in later?

  , stock_terms	jsonb					-- Terms client grants to vendor (stock)
  , dr_limit	bigint		not null default 0	-- A stock term

  , foil_terms	jsonb					-- Terms vendor grants to client (foil)
  , cr_limit	bigint		not null default 0	-- A foil term

  , target	bigint		not null default 0	-- Lift settings
  , lift_marg	float		not null default 0 constraint "!mychips.tallies.LMG" check (lift_marg >= -1 and lift_marg <= 1)
  , drop_marg	float		not null default 1 constraint "!mychips.tallies.DMG" check (drop_marg >=  0 and drop_marg <= 1)
  , lift_max	bigint		not null default 0
  , drop_max	bigint		not null default 0

  , units_c	bigint		default 0 not null
  , _last_chit	int		not null default 0
  , _last_conf	int		not null default 0
  , _last_tset	int		not null default 0
    eval(s $glob::stamps)
}
index {} mychips.tallies tally_guid
index {} mychips.tallies tally_type
index {} mychips.tallies tally_date

table mychips.tally_sets {mychips.tallies} {
    tset_ent	text
  , tset_seq	int	      , foreign key (tset_ent, tset_seq) references mychips.tallies on update cascade on delete cascade
  , tset_idx	int	      , primary key (tset_ent, tset_seq, tset_idx)
  , tset_date	timestamptz	not null default current_timestamp
  , settings	jsonb		not null
  , signature	text		not null
}
index {} mychips.tally_sets tset_date

table mychips.confirms {mychips.tallies} {
    conf_ent	text
  , conf_seq	int	      , foreign key (conf_ent, conf_seq) references mychips.tallies on update cascade on delete cascade
  , conf_idx	int	      , primary key (conf_ent, conf_seq, conf_idx)
  , conf_id	uuid
  , conf_date	timestamptz	not null default current_timestamp
  , sum		bigint		not null
  , signature	text
}

table mychips.tally_tries {mychips.tallies} {
    ttry_ent	text	      , primary key (ttry_ent, ttry_seq)
  , ttry_seq	int	      , foreign key (ttry_ent, ttry_seq) references mychips.tallies on update cascade on delete cascade
  , tries	int		not null default 1
  , last	timestamptz	not null default current_timestamp
}

# Generate unique sequence number for new tallies
#----------------------------------------------------------------
function mychips.tallies_tf_seq() {mychips.users} {
  returns trigger language plpgsql security definer as $$
    begin
        if new.tally_seq is null then
          update mychips.users set _last_tally = greatest(
              coalesce(_last_tally, 0) + 1,
              (select coalesce(max(tally_seq),0)+1 from mychips.tallies where tally_ent = new.tally_ent)
            ) where user_ent = new.tally_ent
              returning _last_tally into new.tally_seq;
          if not found then new.tally_seq = 1; end if;
-- select into new.tally_seq coalesce(max(tally_seq),0)+1 from mychips.tallies where tally_ent = new.tally_ent; -- Not safe for concurrent sessions
        end if;
        return new;
    end;
$$;}
trigger mychips_tallies_tr_seq {} {
    before insert on mychips.tallies for each row execute procedure mychips.tallies_tf_seq();
}

# Generate unique sequence for new tally setting
#----------------------------------------------------------------
function mychips.tally_sets_tf_seq() {mychips.tally_sets} {
  returns trigger language plpgsql security definer as $$
    begin
        if new.tset_idx is null then
          update mychips.tallies set _last_tset = greatest(
              coalesce(_last_tset,0) + 1,
              (select coalesce(max(tset_idx),0)+1 from mychips.tally_sets where tset_ent = new.tset_ent and tset_seq = new.tset_seq)
            ) where tally_ent = new.tset_ent and tally_seq = new.tset_seq
              returning _last_tset into new.tset_idx;
          if not found then new.tset_idx = 1; end if;
        end if;
        return new;
    end;
$$;}
trigger mychips_sets_tr_seq {} {
    before insert on mychips.tally_sets for each row execute procedure mychips.tally_sets_tf_seq();
}

# Generate unique sequence for new confirmation
#----------------------------------------------------------------
function mychips.confirms_tf_seq() {mychips.confirms} {
  returns trigger language plpgsql security definer as $$
    begin
        if new.conf_idx is null then
          update mychips.tallies set _last_conf = greatest(
              coalesce(_last_conf,0) + 1,
              (select coalesce(max(conf_idx),0)+1 from mychips.confirms where conf_ent = new.conf_ent and conf_seq = new.conf_seq)
            ) where tally_ent = new.conf_ent and tally_seq = new.conf_seq
              returning _last_conf into new.conf_idx;
          if not found then new.conf_idx = 1; end if;
        end if;
        return new;
    end;
$$;}
trigger mychips_confirms_tr_seq {} {
    before insert on mychips.confirms for each row execute procedure mychips.confirms_tf_seq();
}

# Assert new trading parameters for a specified tally
#----------------------------------------------------------------
function {mychips.tally_set(ent text, seq int, sets jsonb)} {mychips.tally_sets} {
  returns timestamptz language plpgsql security definer as $$
    declare
      lrec	record;		-- Looping variable
      qflds	text[];
      qstrg	text;
    begin
      for lrec in select * from jsonb_each_text(sets) loop
        if lrec.key = any('{target,lift_marg,drop_marg,lift_max,drop_max}') then
          qflds = qflds || (quote_ident(lrec.key) || ' = ' || lrec.value::text);
        end if;
raise notice 'Tally set % = %', lrec.key, lrec.value;
      end loop;
--raise notice '  qflds: %', array_to_string(qflds,', ');
      qstrg = 'update mychips.tallies set ' || array_to_string(qflds, ', ') || ' where tally_ent = $1 and tally_seq = $2';
raise notice '  qstrg: %', qstrg;
      execute qstrg using ent, seq;

--Fixme: how/where to get real signature?
      insert into mychips.tally_sets (tset_ent,tset_seq,settings,signature) values (ent, seq, sets, 'Sig');
      return current_timestamp;
    end;
$$;}

# Notify the peer server process of tally state changes, and next state request, that needs attention in the database
#----------------------------------------------------------------
function {mychips.tally_notify(tally mychips.tallies)} {mychips.tallies_v mychips.users_v mychips.peers_v mychips.tally_tries} {
  returns boolean language plpgsql security definer as $$
    declare
        act	text;
        jrec	jsonb = '{"target": "tally"}';
        trec	record;			-- Tally
        rrec	record;			-- Retries
        channel	text = 'mychips_peer';
    begin
        if tally.status = 'void'  and tally.request = 'draft' then	-- Determine next action
            act = 'userDraft';
        elsif tally.status = 'draft' and tally.request = 'void'  then
            act = 'userVoid';
        elsif tally.status = 'draft' and tally.request = 'open'  then
            act = 'userAccept';
        elsif tally.status = 'open'  and tally.request = 'close' then
            act = 'userClose';
        end if;
--raise notice 'TN:% % %', act, tally.tally_ent, tally.partner;
        if act is null then			-- Indeterminate state, clear request
            update mychips.tallies set request = null where tally_ent = tally.tally_ent and tally_seq = tally.tally_seq;
            return false;
        end if;
        select into trec user_cid,user_serv,part_cid,part_sock,status,request,state,json from mychips.tallies_v where tally_ent = tally.tally_ent and tally_seq = tally.tally_seq;
        if not trec.user_serv is null then
            channel = channel || '_' || trec.user_serv;
        end if;

        insert into mychips.tally_tries (ttry_ent, ttry_seq) values (tally.tally_ent, tally.tally_seq)
          on conflict (ttry_ent,ttry_seq) do update set tries = mychips.tally_tries.tries + 1, last = current_timestamp
            returning * into rrec;
--raise notice 'Tn c:% h:% p:% u:% s:%', channel, grec.user_serv, trec.part_cid, trec.user_cid, trec.part_sock;
--Fixme: get rid of what is redundant with {object} or otherwise not needed
        jrec = jsonb_set(jrec, '{peer}', to_jsonb(trec.part_cid));
        jrec = jsonb_set(jrec, '{user}', to_jsonb(trec.user_cid));
        jrec = jsonb_set(jrec, '{entity}', to_jsonb(tally.tally_ent));
        jrec = jsonb_set(jrec, '{action}', to_jsonb(act));
        jrec = jsonb_set(jrec, '{try}', to_jsonb(rrec.tries));
        jrec = jsonb_set(jrec, '{last}', to_jsonb(rrec.last));
        jrec = jsonb_set(jrec, '{at}', coalesce(to_jsonb(trec.part_sock),'null'::jsonb));
        jrec = jsonb_set(jrec, '{object}', trec.json);
-- raise notice 'Tally notice:%', jrec::text;
        perform pg_notify(channel, jrec::text);			-- Notify peer server of next state action request
        
        return true;
    end;
$$;}

# Generate notifications about updated tallies for listening peer servers
#----------------------------------------------------------------
function mychips.tallies_tf_notify() {mychips.tally_notify(mychips.tallies) mychips.route_check(mychips.tallies)} {
  returns trigger language plpgsql security definer as $$
    declare
      notify	boolean default false;
    begin
      if TG_OP = 'INSERT' then
        notify = true;
      else			-- This is an update
        if new.request is not null and new.request is distinct from old.request then
          notify = true;
        end if;
        if new.request is null and new.status = 'open' and old.status != 'open' then
          perform mychips.route_check(new);		-- New tally, let's query for route info
        end if;
      end if;
      if notify then perform mychips.tally_notify(new); end if;
      return new;
    end;
$$;}
trigger mychips_tallies_tr_notice {} {
    after insert or update on mychips.tallies for each row execute procedure mychips.tallies_tf_notify();
}

# Compute current state of a tally, based on its various fields
#----------------------------------------------------------------
function {mychips.tally_state(status text, request text, user_sig text, part_sig text, total bigint)} {mychips} {
  returns text immutable language plpgsql as $$
    begin
      return case when status = 'void' and request is null	then 'void'
         when status = 'void' and request = 'draft'		then 'userDraft'
         when status = 'draft' and request is null then
           case when user_sig is not null and part_sig is null	then 'userProffer'
                when part_sig is not null and user_sig is null	then 'peerProffer'
           else 'undefined' end
         when status = 'draft' and request = 'void'		then 'userVoid'
         when status = 'draft' and request = 'open'		then 'accepted'
         when status = 'open' and request is null		then 'open'
         when status = 'open' and request = 'close'		then 'userClose'
         when status = 'close' and request is null then
             case when total = 0 then 'closed' else 'closing' end
         else 'undefined' end;
    end;
$$;}

# Base view of tallies
#----------------------------------------------------------------
define multSign {case when te.tally_type = 'stock' then unitMultiplier().00 else -unitMultiplier().00 end}
view mychips.tallies_v {mychips.tallies mychips.chits mychips.users_v mychips.peers_v mychips.chit_open(text,text) mychips.tally_state(text,text,text,text,bigint)} {select 
    eval(fld_list $tallies::tallies_se	te)
  , ue.peer_cid		as user_cid
  , ue.peer_addr	as user_addr
  , ue.peer_sock	as user_sock
  , ue.std_name		as user_name
  , ue.serv_id		as user_serv
  , te.user_sig
  , pe.peer_cid		as part_cid
  , pe.peer_addr	as part_addr
  , pe.peer_sock	as part_sock
  , pe.std_name		as part_name
  , te.part_sig
  
  , not pe.user_ent is null						as inside
  , mychips.tally_state(status,request,user_sig,part_sig,units_c)	as state
  , mychips.tally_state(status,request,user_sig,part_sig,units_c) = any(array['peerProffer','closing']) as action
  , jsonb_build_object(
       'guid', te.tally_guid,
       'version', te.version,
       'stock', case when te.tally_type = 'stock' then ue.peer_cid else pe.peer_cid end,
       'foil',  case when te.tally_type = 'stock' then pe.peer_cid else ue.peer_cid end,
       'created', te.tally_date,
       'contract', te.contract,
       'signed', json_build_object(
         'digest', '',
         'stock', case when te.tally_type = 'stock' then te.user_sig else te.part_sig end,
         'foil',  case when te.tally_type = 'stock' then te.part_sig else te.user_sig end
       )
    )			as json
  , coalesce(tc.units,0)			as units
  , te.units_c::float8 / multSign()		as total_c
  , coalesce(tc.units,0)::float8 / multSign()	as total
  , coalesce(tc.chits,0)			as chits
  , greatest(coalesce(tc.latest, te.mod_date), te.mod_date)	as latest

    from	mychips.tallies	te
    join	mychips.users_v	ue on ue.user_ent = te.tally_ent
    join	mychips.users_v	pe on pe.peer_ent = te.partner
    left join	(
      select chit_ent, chit_seq, sum(units) as units, count(chit_idx) as chits, max(mod_date) as latest from mychips.chits where mychips.chit_open(request, signature)
      group by 1,2
    ) tc on tc.chit_ent = te.tally_ent and tc.chit_seq = te.tally_seq
    ;

--Probably don't want/need these:
--    ev#al(trigview::insert mychips.tallies_v mychips.tallies $tallies::tallies_v_in $tallies::tallies_pk [concat $glob::stampin {request 'draft'}]);
--    ev#al(trigview::update mychips.tallies_v mychips.tallies $tallies::tallies_v_up $tallies::tallies_pk $glob::stampup);
}

# User view of tallies
#----------------------------------------------------------------
view mychips.tallies_v_me {mychips.tallies_v base.user_id(text)} {select 
    t.*
    from	mychips.tallies_v t
    where	t.tally_ent = base.user_id(session_user)
} -grant {
    {tally	{s} {s i u} {d}}
}

# View showing a single entry for each credit relationship (for network graph, obsolete?)
# Could this be obsoleted in favor of tallies_v_net or users_v_tallies below?
#----------------------------------------------------------------
view mychips.tallies_v_graph {mychips.tallies_v} {select 
    tally_guid as guid    
  , case when tally_type = 'stock' then tally_ent else partner end as stock_ent
  , case when tally_type = 'stock' then partner else tally_ent end as foil_ent
  , case when tally_type = 'stock' then user_cid else part_cid end as stock_cid
  , case when tally_type = 'stock' then part_cid else user_cid end as foil_cid
  , case when tally_type = 'stock' then total_c else -total_c end as total
  , state
  , max(latest) as latest
  
  from mychips.tallies_v group by 1,2,3,4,5,6,7;
}

# Summarize data about open tallies
#----------------------------------------------------------------
view mychips.tallies_v_sum {mychips.tallies_v} {select 
    tally_ent
  , count(tally_seq)						as tallies
  , sum(total)							as total
  , sum(units)							as units
  , array_agg(partner)						as partners
  , array_agg(part_cid)						as part_cids
  , array_agg(tally_guid)					as guids
  , array_agg(tally_seq)					as seqs
  , array_agg(tally_type)					as types
  , array_agg(state)						as states
  , array_agg(total)						as totals
  , array_agg(units)						as unitss
  , array_agg(inside)						as insides

  , sum(total) filter (where tally_type = 'stock')		as stock_tot
  , sum(total) filter (where tally_type = 'foil')		as foil_tot
  , sum(units) filter (where tally_type = 'stock')		as stock_uni
  , sum(units) filter (where tally_type = 'foil')		as foil_uni

  , count(nullif(tally_type, 'foil'))::int4			as stocks
  , count(nullif(tally_type, 'stock'))::int4			as foils
  , array_agg(partner) filter (where tally_type = 'stock')	as clients
  , array_agg(partner) filter (where tally_type = 'foil')	as vendors
  , array_agg(part_cid) filter (where tally_type = 'stock')	as client_cids
  , array_agg(part_cid) filter (where tally_type = 'foil')	as vendor_cids
  , array_agg(tally_guid) filter (where tally_type = 'stock')	as stock_guids
  , array_agg(tally_guid) filter (where tally_type = 'foil')	as foil_guids
  , array_agg(tally_seq) filter (where tally_type = 'stock')	as stock_seqs
  , array_agg(tally_seq) filter (where tally_type = 'foil')	as foil_seqs
  , array_agg(total) filter (where tally_type = 'stock')	as stock_tots
  , array_agg(total) filter (where tally_type = 'foil')		as foil_tots
  , array_agg(units) filter (where tally_type = 'stock')	as stock_unis
  , array_agg(units) filter (where tally_type = 'foil')		as foil_unis

  , max(latest)							as latest
  from (select * from mychips.tallies_v order by tally_ent,tally_seq) t
  group by 1;
}

# List of users with summarized data about their tallies
#----------------------------------------------------------------
view mychips.users_v_tallysum {mychips.users_v mychips.tallies_v_sum} {select 
    u.id, u.std_name, u.user_ent, u.peer_ent, u.peer_cid, u.peer_sock, u.ent_name, u.fir_name, u.ent_type
  , coalesce(s.tallies, 0)			as tallies
  , coalesce(s.total, 0.0)			as total
  , coalesce(s.units, 0)			as units
  , coalesce(s.stocks, 0)			as stocks
  , coalesce(s.foils, 0)			as foils
  , coalesce(s.stock_tot, 0.0)			as stock_tot
  , coalesce(s.foil_tot, 0.0)			as foil_tot
  , coalesce(s.partners, '{}'::text[])		as partners
  , coalesce(s.clients, '{}'::text[])		as clients
  , coalesce(s.vendors, '{}'::text[])		as vendors
  
  , coalesce(s.part_cids, '{}'::text[])		as part_cids
  , coalesce(s.guids, '{}'::uuid[])		as guids
  , coalesce(s.seqs, '{}'::int[])		as seqs
  , coalesce(s.types, '{}'::text[])		as types
  , coalesce(s.states, '{}'::text[])		as states
  , coalesce(s.totals, '{}'::float8[])		as totals
  , coalesce(s.unitss, '{}'::bigint[])		as unitss
  , coalesce(s.insides, '{}'::boolean[])	as insides
  
  , coalesce(s.client_cids, '{}'::text[])	as client_cids
  , coalesce(s.vendor_cids, '{}'::text[])	as vendor_cids
  , coalesce(s.stock_guids, '{}'::uuid[])	as stock_guids
  , coalesce(s.foil_guids, '{}'::uuid[])	as foil_guids
  , coalesce(s.stock_seqs, '{}'::int[])		as stock_seqs
  , coalesce(s.foil_seqs, '{}'::int[])		as foil_seqs
  , coalesce(s.stock_tots, '{}'::float8[])	as stock_tots
  , coalesce(s.foil_tots, '{}'::float8[])	as foil_tots
  , greatest(coalesce(s.latest, u.mod_date),u.mod_date)	as latest
    from	mychips.users_v u
    left join	mychips.tallies_v_sum s on s.tally_ent = u.peer_ent;
}

# View showing a single entry for each credit relationship (for lift algorithm, pathway views)
#----------------------------------------------------------------
view mychips.tallies_v_net {mychips.tallies} {select 
    coalesce(ts.tally_guid,tf.tally_guid)	as guid
  , ts.tally_guid				as stock_guid
  , tf.tally_guid				as foil_guid
  , coalesce(ts.tally_ent,tf.partner)		as stock_ent
  , coalesce(tf.tally_ent,ts.partner)		as foil_ent
  , ts.tally_ent				as stock_user
  , tf.tally_ent				as foil_user
  , ts.dr_limit					as stock_drl
  , ts.cr_limit					as stock_crl
--  , ts.bal_target				as stock_tgt
  , tf.dr_limit					as foil_drl
  , tf.cr_limit					as foil_crl
--  , tf.bal_target				as foil_tgt
  , greatest(ts.dr_limit, tf.dr_limit)		as dr_max
  , greatest(ts.cr_limit, tf.cr_limit)		as cr_max
--  , coalesce(ts.lift_marg,0) + coalesce(tf.lift_marg,0)		as lift_marg
, 1 as lift_marg
--  , coalesce(ts.drop_marg,0) + coalesce(tf.drop_marg,0)		as drop_marg
, 1 as drop_marg
--  , least(ts.bal_target, tf.bal_target)		as target
, 0 as target
  , coalesce(ts.units_c, tf.units_c)		as units
  
  from			(select * from mychips.tallies where tally_type = 'stock') ts
  full outer join	(select * from mychips.tallies where tally_type = 'foil') tf on tf.tally_guid = ts.tally_guid
}

# General routine to build update query string
#----------------------------------------------------------------
function {mychips.state_updater(recipe jsonb, tab text, fields text[], qflds text[] default null)} {mychips} {
  returns text immutable language plpgsql as $$
    declare
      lrec	record;		-- Looping variable
    begin
      if qflds is null then
        qflds = '{"request = null", "mod_date = current_timestamp", "mod_by = session_user"}';
      end if;
      for lrec in select * from jsonb_each_text(recipe->'update') loop
-- raise notice '  update set % = %', lrec.key, lrec.value;
        if lrec.key = any(fields) then		-- update only allowable fields
          qflds = qflds || (quote_ident(lrec.key) || ' = ' || quote_nullable(lrec.value));
        end if;
      end loop;
      return 'update ' || tab || ' set ' || array_to_string(qflds,', ') || ' where ';
    end;
$$;}

# Process tally state transitions requested by the peer server process
#----------------------------------------------------------------
function {mychips.tally_process(msg jsonb, recipe jsonb)} {mychips.tallies_v mychips.users_v} {
  returns text language plpgsql as $$
    declare
        cid		text = msg->>'user';
        obj		jsonb = msg->'object';
        guid		uuid = obj->>'guid';
        curState	text;
        qstrg		text;			-- Temporary string
        erec		record;			-- Tally entity, we will ignore the one in msg
        trec		record;			-- Holds tally record(s)
        jrec		jsonb = '{"target": "tally"}';
        acted		boolean = false;
        tallyType text; notType text; partner text;
    begin
        select into erec id,serv_id from mychips.users_v where peer_cid = cid;	-- Look up the entity on our own
        if not found then return null; end if;

        select into trec tally_ent, tally_seq, state from mychips.tallies_v where tally_ent = erec.id and tally_guid = guid;
        curState = trec.state;
--raise notice 'Tally cid:% entity:% state:% recipe:%', cid, erec.id, curState, recipe;
        if not found then
            curState = 'null';			-- Special code for when the tally doesn't exist yet
        end if;
        if not (jsonb_build_array(curState) <@ (recipe->'context')) then	--Not in any applicable state (listed in our recipe context)
--raise notice 'Z:% C:%', jsonb_build_array(curState), recipe->'context';
            return curState;
        end if;

        if recipe ? 'upsert' then		-- If there an upsert key in the recipe object?
--raise notice '  upsert obj:% curState:%', obj, curState;
          tallyType = (case when obj->>'stock' = cid then 'stock' else 'foil' end);
          notType = (case when obj->>'stock' = cid then 'foil' else 'stock' end);
--raise notice '  tallyType:% notType:%', tallyType, notType;
          if curState = 'null' then			-- Need to do insert
            select into partner peer_ent from mychips.peers where peer_cid = case when tallyType = 'stock' then obj->>'foil' else obj->>'stock' end;
            if not found then return null; end if;

            execute 'insert into mychips.tallies (tally_ent,tally_guid,tally_type,tally_date,version,partner,contract,status,comment,user_sig,part_sig,cr_limit,dr_limit) 
              values ($1,$2,$3,current_timestamp,$4,$5,$6,$7,$8,$9,$10,$11,$12) returning tally_ent, tally_seq' into trec
                using erec.id, guid, tallyType, (obj->>'version')::int, partner, obj->'contract', 'draft', obj->'comment', obj->'signed'->>tallyType, obj->'signed'->>notType, coalesce((obj->>'crLimit')::bigint,0), coalesce((obj->>'drLimit')::bigint,0);
          else						-- Tally already exists, do update
--Fixme: we are currently ignoring the recipe update fields and only updating from the object fields!
            execute 'update mychips.tallies set version = $1, contract = $2, status = $3, comment = $4, user_sig = $5, part_sig = $6, cr_limit = $7, dr_limit = $8, request = null, mod_date = current_timestamp, mod_by = session_user  where tally_ent = $9 and tally_seq = $10'
                using (obj->>'version')::int, obj->'contract', 'draft', obj->'comment', obj->'signed'->>tallyType, obj->'signed'->>notType, coalesce((obj->>'crLimit')::bigint,0), coalesce((obj->>'drLimit')::bigint,0), trec.tally_ent, trec.tally_seq;
          end if;
          acted = true;
        end if;

        if recipe ? 'update' then			-- There's an update key in the recipe
          qstrg = mychips.state_updater(recipe, 'mychips.tallies', '{status, part_sig}');
--raise notice 'SQL:%', qstrg;
          execute qstrg || ' tally_ent = $1 and tally_seq = $2' using trec.tally_ent, trec.tally_seq;
          acted = true;
        end if;

        if acted then
          delete from mychips.tally_tries where ttry_ent = trec.tally_ent and ttry_seq = trec.tally_seq;
        else
          return null;		-- Don't proceed if we didn't do anything
        end if;

--raise notice '  At end, tally % %', trec.tally_ent, trec.tally_seq;
        select into trec tally_ent,tally_seq,state,action,json from mychips.tallies_v where tally_ent = trec.tally_ent and tally_seq = trec.tally_seq;
        if trec.action or (trec.state = 'open' and curState is distinct from 'open') then	-- Also notify if changed to open status
--raise notice '  tally notify for user channel mychips_user_% %', trec.tally_ent, trec.json;
            jrec = jsonb_set(jrec, '{entity}', to_jsonb(trec.tally_ent));
            jrec = jsonb_set(jrec, '{sequence}', to_jsonb(trec.tally_seq));
            jrec = jsonb_set(jrec, '{state}', to_jsonb(trec.state));
            jrec = jsonb_set(jrec, '{object}', trec.json);
            perform pg_notify('mychips_user_' || trec.tally_ent, jrec::text);
            perform pg_notify('mychips_user', jrec::text);		-- Simulations use this
        end if;
        return trec.state;
    end;
$$;}

# Check for any lingering, unprocessed notices
# A peer server should call this on launch to become aware of any activity it has missed
#----------------------------------------------------------------
function {mychips.tally_notices()} {mychips.tallies mychips.tally_tries mychips.chits base.parm_int(text,text)} {
  returns int language plpgsql as $$
    declare
        trec		mychips.tallies;
        crec		mychips.chits;
        didem		int = 0;
        min_min		int = coalesce(base.parm_int('peers','min_time'), 60);
        min_time	interval = (min_min::text || ' minutes')::interval;
    begin
        for trec in select * from mychips.tallies ta	-- tokens stale by peer_min_time
          join mychips.tally_tries tr on tr.ttry_ent = ta.tally_ent and tr.ttry_seq = ta.tally_seq
          where ta.request is not null and (current_timestamp - tr.last) >= min_time loop
            perform mychips.tally_notify(trec);
            didem = didem + 1;
        end loop;

        for crec in select * from mychips.chits ch
          join mychips.chit_tries ct on ct.ctry_ent = ch.chit_ent and ct.ctry_seq = ch.chit_seq and ct.ctry_idx = ch.chit_idx
          where ch.request is not null and (current_timestamp - ct.last) >= min_time loop
            perform mychips.chit_notify(crec);
            didem = didem + 1;
        end loop;
        return didem;
    end;
$$;}

# Generate notifications about new or updated tallies for listening admin servers
#----------------------------------------------------------------
function mychips.change_tf_notify() {mychips} {
  returns trigger language plpgsql security definer as $$
    begin
--raise notice 'Change notify: mychips_admin';
      perform pg_notify('mychips_admin', format('{"target":"%s", "oper":"%s", "time":"%s"}', coalesce(TG_ARGV[0],'Unknown'), TG_OP, transaction_timestamp()::text));
      return null;
    end;
$$;}
trigger mychips_tallies_tr_change {} {
    after insert or update or delete on mychips.tallies for each statement execute procedure mychips.change_tf_notify('tallies');
}
trigger mychips_chits_tr_change {} {
    after insert or update or delete on mychips.chits for each statement execute procedure mychips.change_tf_notify('chits');
}

# Find an open tally meeting certain criteria, returning the sequence number (currently used only in agent1 model)
#----------------------------------------------------------------
function {mychips.tally_find(ent text, part text, typ text)} {mychips.tallies} {
  returns int immutable language plpgsql as $$
    declare
      trec record;
    begin
      select into trec * from mychips.tallies where tally_ent = ent and status = 'open' and tally_type = typ and partner = part order by crt_date desc limit 1;
      return trec.tally_seq;
    end;
$$;}
