#Schema for tracking the status of distributed lifts
#Copyright MyCHIPs.org; See license in root of this package
#----------------------------------------------------------------
#TODO:
#- Protocol 1.4/1.5:
#X-   Local lifts work
#X-   Adapt to 1.5 distributed lifts via chipNet/chipSync
#-   Strip out old/unused states
#-   Remove obsolete fields from lift record
#- 
#- Old TODOs (review/update/remove):
#- Get rid of circuit field--becomes linear payment user signature, incorporated into origin field
#- On message from terminus node, from-address should match base tally partner
#- Can a lift get updated, other than status? (probably a user-linear lift can)
#-   Limit/define fields user can update
#-   Plan/deploy lift locally or distributed when user request=seek
#- Settable parameters:
#-   Max lift life to participate in (ignore lifts with life > L)
#-   Max lift sequence (to detect large/infinite loops)
#- Implement costed lifts
#-   How do we pick the optimal lift among a variety of available choices?
#-   How/when to compromise on non-zero lift_margins?
#- 
module mychips

namespace eval lifts {
    def lifts_pk	{lift_uuid lift_seq}
    def lifts_v_up	{lift_uuid request find origin referee tallies signs status signature agent_auth payor_auth trans}
    def lifts_v_in	[concat $lifts_v_up lift_date lift_type units life circuit]
    def lifts_se	[concat $lifts_v_in lift_seq payor_ent payee_ent $glob::stampfn]
}

table mychips.lifts {mychips mychips.tallies} {
    lift_uuid	uuid
  , lift_seq	int	      , primary key (lift_uuid, lift_seq)

-- Internal management
  , lift_type	text		not null default 'rel' constraint "!mychips.lifts:IVT" check(lift_type isnull or lift_type in ('in','org','pay','rel'))
  , request	text		constraint "!mychips.lifts:IVR" check(request isnull or request in ('init','seek','exec'))
  , status	text		not null default 'draft' constraint "!mychips.lifts:IVS" check(status in ('draft','init','seek','exec','part','good','void'))
  , tallies	uuid[]		constraint "!mychips.lifts:ITL" check (status in ('draft', 'init', 'void', 'seek') or tallies notnull)
  , signs	int[]		constraint "!mychips.lifts:ISL" check (array_length(tallies,1) = array_length(signs,1))

-- Payment related data
  , payor_ent	text		references base.ent on update cascade on delete cascade
  , payee_ent	text		references base.ent on update cascade on delete cascade
  , payor_auth	jsonb

-- Other components of signed lift
  , units	bigint		not null
  , lift_date	timestamptz(3)	not null default current_timestamp
  , life	interval	not null default '2 minutes'
  , find	jsonb

  , agent_auth	jsonb
  , trans	jsonb		-- ChipNet

-- Obsolete? (remove if/when possible)
  , session	text
  , origin	jsonb
  , referee	jsonb
  , circuit	boolean		not null default true
  , signature	text
--  , digest	bytea

    eval(s $glob::stamps)
}
#index {} mychips.lifts lift_date

table mychips.lifts_rec {mychips mychips.lifts} {
    lift_uuid	uuid		unique not null
  , lift_seq	int		default 0
  , record	jsonb		not null
  , foreign key (lift_uuid, lift_seq) references mychips.lifts on update cascade on delete cascade
}

# Generate unique primary key for a new lift
#----------------------------------------------------------------
function mychips.lifts_tf_bi() {mychips.j2h(jsonb) mychips.tallies_v} {
  returns trigger language plpgsql security definer as $$
    declare
      trec	record;
      i		int;
    begin
      if new.lift_uuid isnull then
        new.lift_uuid = uuid_generate_v4();	-- Random, agent can change it on init phase
        new.lift_seq = 0;
      elsif new.lift_seq isnull then		-- This is not safe for concurrent insertions
        select into new.lift_seq coalesce(max(lift_seq)+1,0) from mychips.lifts where lift_uuid = new.lift_uuid;
      end if;					-- Will a single lift uuid ever get requests for two new extensions at the same time?  To fix it we will require a separate sequence table (or serialize seq and have possible gaps).

      if new.status = 'draft' and new.request = 'seek' then	-- General consistency check
        if new.life isnull then
          new.life = base.parm('lifts', 'life', '2 minutes'::text)::interval;
        end if;
      end if;

      if array_length(new.signs,1) != array_length(new.tallies,1) then
        for i in array_lower(new.tallies,1) .. array_upper(new.tallies,1) loop
          if new.signs[i] is null then		-- Make direction assumption about missing signs
            new.signs[i] = -1;			-- Default to lift (as opposed to drop)
          end if;
        end loop;
      end if;

      return new;
    end;
$$;}
trigger mychips_lifts_tr_bi {} {
    before insert on mychips.lifts for each row execute procedure mychips.lifts_tf_bi();
}

# After each insert (Lift record has to exist for chits to reference it)
#----------------------------------------------------------------
function mychips.lifts_tf_ai() {mychips.lift_chitcheck(mychips.lifts)} {
  returns trigger language plpgsql security definer as $$
    begin
      if new.tallies notnull then			-- Always on insert if edges specified
        return mychips.lift_chitcheck(new);
      end if;
      return new;
    end;
$$;}
trigger mychips_lifts_tr_ai {} {
    after insert on mychips.lifts for each row execute procedure mychips.lifts_tf_ai();
}

# Before updating each lift record
#----------------------------------------------------------------
function mychips.lifts_tf_bu() {mychips.lift_chitcheck(mychips.lifts) mychips.chits mychips.j2h(jsonb)} {
  returns trigger language plpgsql security definer as $$
    declare
      lrec	record;
    begin
--raise notice 'BU uuid:% seq:% stat:% T:%', new.lift_uuid, new.lift_seq, new.status, new.tallies;
      if old.status in ('good','void') then return null; end if;	-- One-way ticket to good,void
      
      if new.status != old.status then
        if new.status in ('good','exec') then
          new = mychips.lift_chitcheck(new);
        end if;
        if new.status in ('good','void') then
          update mychips.chits set status = new.status where chit_uuid = new.lift_uuid and lift_seq = new.lift_seq;
        end if;
      end if;
      return new;
    end;
$$;}
trigger mychips_lifts_tr_bu {} {
    before update on mychips.lifts for each row execute procedure mychips.lifts_tf_bu();
}

# Create or update pending chits for a specified lift
#----------------------------------------------------------------
function {mychips.lift_chitcheck(lf mychips.lifts)} {mychips.lifts} {
  returns mychips.lifts language plpgsql security definer as $$
    declare
      trec	record;
      uuid	uuid;
      stat	text = case when lf.status = 'good' then 'good' else 'pend' end;
      rows	int;
      i		int;
      sign	int;
    begin

--raise notice 'Lift chit check:% uuid:% seq:% stat:% T:%', lf.units, lf.lift_uuid, lf.lift_seq, stat, lf.tallies;
      for i in array_lower(lf.tallies,1) .. array_upper(lf.tallies,1) loop
        uuid = lf.tallies[i];
        sign = coalesce(lf.signs[i], -1);
--raise notice '  tally uuid:%', uuid;
        for trec in select * from mychips.tallies where tally_uuid = uuid order by tally_type loop
--raise notice '    %-%: % %-%', trec.tally_ent, trec.tally_seq, trec.tally_type, lf.lift_uuid, lf.lift_seq;
          insert into mychips.chits (
            chit_ent, chit_seq, chit_type, chit_uuid, lift_seq, chit_date, units, status
          ) values (
            trec.tally_ent, trec.tally_seq, 'lift', lf.lift_uuid, lf.lift_seq, lf.lift_date, lf.units * sign, stat
          ) on conflict on constraint "!mychips.chits:CUU" do
            update set status = stat;

          get diagnostics rows = ROW_COUNT; if rows < 1 then
            raise exception '!mychips.lifts:CIF';
          end if;
        end loop;
      end loop;
      return lf;
    end;
$$;}

# Notify the peer server process of lift state changes that need attention in the database
#----------------------------------------------------------------
function {mychips.lift_notify_agent(lift mychips.lifts)} {mychips.lifts_v mychips.tallies_v_edg} {
  returns boolean language plpgsql security definer as $$
    declare
        channel		text;
        jret		jsonb;			-- Holds notify record
        jmerge		jsonb = '{}';		-- Merge into notify
        lrec		record;			-- Lift view record
        erec		record;			-- Edge record
        rrec		record;			-- Retries
    begin
--raise notice 'Lift_notify R:%', lift.request;

        select into lrec l.json_pay, l.json, l.payor_ent, l.payor_auth, l.find, l.origin, l.trans, u.user_psig,
          jsonb_build_object(
            'cuid', u.peer_cuid,
            'agent', u.peer_agent
          ) as payor_chad
          from mychips.lifts_v l
          join mychips.users_v u on u.id = l.payor_ent
          where lift_uuid = lift.lift_uuid and lift_seq = lift.lift_seq;
        channel = 'ma_' || (lrec.origin->>'agent');

      if lift.request = 'init' then
        jmerge = jmerge || jsonb_build_object(
          'aux', jsonb_build_object(
            'auth',		lrec.payor_auth
          , 'pub',		lrec.user_psig
          , 'pay',		lrec.json_pay
        ));

      elsif lift.request = 'seek' then
        jmerge = jmerge || jsonb_build_object(
          'aux', jsonb_build_object(
            'find',		lrec.find
          , 'origin',		lrec.payor_chad
          , 'trans',		lift.trans
        ));

      elsif lift.request = 'exec' then		--Give details about the outbound tally
        select into erec inp, inp_chad, uuid, out, out_chad from mychips.tallies_v_edg
          where out isnull and 			-- Depends on valid pick & via from process routine
          uuid = (lift.trans->'plans'->((lift.trans->'pick')::int)->>'via')::uuid;
        jmerge = jmerge || jsonb_build_object(
          'aux', jsonb_build_object(
            'find',		lrec.find
          , 'auth',		lrec.payor_auth
          , 'origin',		lrec.payor_chad
          , 'trans',		lift.trans
          , 'edge',		to_jsonb(erec)
        ));

      end if;

      jret = jsonb_build_object('target', 'lift'
        , 'action',	lift.request
        , 'seq',	lift.lift_seq
        , 'object',	lrec.json
      ) || jmerge;

raise notice 'Lift notify:% %', channel, lift.request;
      if channel notnull then
        perform pg_notify(channel, jret::text);
      end if;
      return true;
    end;
$$;}

# Generate notifications about updated lifts for listening peer servers
#----------------------------------------------------------------
function mychips.lifts_tf_notify() {mychips.lifts} {
  returns trigger language plpgsql security definer as $$
    declare
      doagent	boolean default false;
      douser	boolean default false;
    begin
      if TG_OP = 'INSERT' and new.request notnull then
        doagent = true;
        douser = true;
      else
        if new.request notnull and new.request is distinct from old.request then
          doagent = true;
        end if;
        if new.status is distinct from old.status then
          douser = true;
        end if;
      end if;	-- TG_OP
--raise notice 'Lift % a: %: %', TG_OP, doagent, new.request;
      if doagent then perform mychips.lift_notify_agent(new); end if;
      
--raise notice 'Lift % u: %: %', TG_OP, douser, new.status;
      if douser and new.status in ('good', 'void') then
        if new.payor_ent notnull then
          perform mychips.lift_notify_user(new.payor_ent, new);
        end if;
        if new.payee_ent notnull then
          perform mychips.lift_notify_user(new.payee_ent, new);
        end if;
      end if;
      return new;
    end;
$$;}
trigger mychips_lifts_tr_notify {} {
    after insert or update on mychips.lifts for each row execute procedure mychips.lifts_tf_notify();
}

# Common fields for json rendering
#----------------------------------------------------------------
function {mychips.lift_json_c(lf mychips.lifts)} {mychips.lifts} {
  returns jsonb stable language sql as $$
    select jsonb_strip_nulls(jsonb_build_object(
       'lift',	lf.lift_uuid
     , 'date',	to_char(lf.lift_date AT TIME ZONE 'UTC', 'YYYY-MM-DD"T"HH24:MI:SS.FF3"Z"')
     , 'units',	lf.units
    ))
$$;}

# Standard json for a user to sign a lift payment
#----------------------------------------------------------------
function {mychips.lift_json_p(lf mychips.lifts)} {
  mychips.lifts
  mychips.lift_json_c(mychips.lifts)
} {
  returns jsonb stable language sql as $$
    select mychips.lift_json_c(lf) || jsonb_strip_nulls(jsonb_build_object(
       'find',	lf.find
     , 'ref',	lf.payor_auth->'ref'
     , 'memo',	lf.payor_auth->'memo'
    ))
$$;}

# Compute current state of a lift
#----------------------------------------------------------------
function {mychips.lift_state(status text, request text)} {mychips} {
  returns text stable language sql as $$
    select
      status ||
      case when request isnull then '' else '.' || request end;
$$;} -grant mychips

# Base view of lifts
#----------------------------------------------------------------
view mychips.lifts_v {
  mychips.lifts
  mychips.lifts_rec
  mychips.tallies_v
  mychips.lift_state(text,text)
  mychips.lift_json_c(mychips.lifts)
  mychips.lift_json_p(mychips.lifts)
  mychips.j2h(jsonb)
} {select 
    eval(fld_list $lifts::lifts_se lf)
  , mychips.lift_state(lf.status, lf.request)			as state

  , mychips.lift_json_c(lf)					as json_core
  , mychips.lift_json_p(lf)					as json_pay
  , mychips.lift_json_c(lf) || jsonb_build_object(
      'life',	extract(epoch from lf.life)
    )								as json
  , lf.lift_date + lf.life					as expires
  , lf.lift_date + lf.life - crt_date				as remains
  , lr.record

    from	mychips.lifts	lf
    left join	mychips.lifts_rec lr on lr.lift_uuid = lf.lift_uuid

    eval(trigview::insert mychips.lifts_v mychips.lifts $lifts::lifts_v_in $lifts::lifts_pk [concat $glob::stampin] {} mychips.lifts_vf_pre);
    eval(trigview::update mychips.lifts_v mychips.lifts $lifts::lifts_v_up $lifts::lifts_pk $glob::stampup {} mychips.lifts_vf_pre);

} -grant {
    {lift	{s} {i u} {d}}
}

# Before insert/update to lifts_v
#----------------------------------------------------------------
function {mychips.lifts_vf_pre(new mychips.lifts_v, old mychips.lifts_v, tgop text)} {mychips.lifts_v mychips.lifts_rec} {
  returns mychips.lifts_v language plpgsql security definer as $$
    declare
      doUp boolean = true;
    begin
      if new.record isnull or (tgop = 'UPDATE' and new.record = old.record) then
        doUp = false;
      end if;
--raise notice 'lifts_v_pre: % % %', new.lift_uuid, doUp, new.record;
      if doUp then
        insert into mychips.lifts_rec (lift_uuid, record) values (new.lift_uuid, new.record)
        on conflict (lift_uuid) do
          update set record = new.record;
      end if;
      return new;
    end;
$$;}

# Lifts joined with top, bottom tallies with default values for origin, find, referee
#----------------------------------------------------------------
#view mychips.lifts_v_dist {mychips.lifts_v mychips.tallies_v} {select lf.*
#  , tt.hold_chad					as top_chad
#  , tt.part_chad					as out_chad
#  , tt.tally_uuid					as top_tally
#  , bt.hold_chad					as bot_chad
#  , bt.part_chad					as inp_chad
#  , bt.tally_uuid					as bot_tally
#--  , tt.part_ent isnull					as foro
#--  , bt.part_ent isnull					as fori
#
#  , coalesce(lf.origin, jsonb_build_object(
#      'agent',	bt.hold_agent		-- Or use system agent here?
#    , 'host',	bt.hold_host
#    , 'port',	bt.hold_port
#    , 'plan',	jsonb_build_object(
#        'cuid',		bt.hold_cuid
#      , 'agent',	bt.hold_agent)
#    ))							as origin_v
#
#  , coalesce(lf.find, jsonb_build_object(
#      'cuid',	bt.part_cuid
#    , 'agent',	bt.part_agent
#    ))							as find_v
#
#  , coalesce(lf.referee, jsonb_build_object(
#      'agent',	bt.hold_agent
#    , 'host',	bt.hold_host
#    , 'port',	bt.hold_port
#    ))							as referee_v
#
#    from mychips.lifts_v	lf
#    left join	mychips.tallies_v	tt on tt.part_ent isnull and
#    		tt.tally_uuid = lf.tallies[array_upper(lf.tallies,1)]
#    left join	mychips.tallies_v	bt on bt.part_ent isnull and
#    		bt.tally_uuid = lf.tallies[array_lower(lf.tallies,1)]
#}

# User-permissioned view of lifts that affect me
#----------------------------------------------------------------
view mychips.lifts_v_me {mychips.lifts_v mychips.chits_v_me base.curr_eid()} {select 
    chit_ent
  , chit_uuid,sum(net)		as net
  , array_agg(chit_seq)		as seqs
  , array_agg(chit_idx)		as idxs
  , array_agg(units)		as units
  
  from mychips.chits_v_me where chit_type = 'lift' group by 1,2;
} -grant lift

# Process lift state transitions requested by the peer server process
#----------------------------------------------------------------
function {mychips.lift_process(msg jsonb, recipe jsonb)} {
  mychips.users_v mychips.lifts_v
  mychips.path_find(text,text,bigint,int)
} {
  returns jsonb language plpgsql as $$
    declare
        obj		jsonb		= msg->'object';	-- Lift JSON record
        seq		int		= msg->'seq';		-- Lift record specifier
        itally		uuid		= msg->>'it';		-- In-bound tally 
        otally		uuid		= msg->>'ot';		-- Out-bound tally
        uuid		uuid		= obj->>'lift'uuid;	-- Lift uuid
        units		bigint		= obj->>'units';	-- Lift amount
        find		jsonb		= obj->'find';		-- Payee
        req		text		= 'relay';		-- Default request
        curState	text		= 'null';		-- Current state
        lrec		record;		-- Holds lift record(s)
        qrec		record;		-- Pathway/Route record
        qstrg		text;		-- Temporary string
        remain		interval;	-- Time remaining on lift
        jrec		jsonb;
        upspec		jsonb;
    begin
raise notice 'Lift process uuid:% seq:% rec:% u:%', uuid, seq, recipe, units;

      if uuid notnull and (seq notnull or itally notnull or otally notnull) then
raise notice ' find % by seq:% it:% ot:%', uuid, seq, itally, otally;
        select into lrec l.lift_type,l.lift_uuid,l.lift_seq,l.payor_ent,l.payee_ent,l.units,l.state,l.origin
          from mychips.lifts_v l where l.lift_uuid = uuid
            and (seq isnull or l.lift_seq = seq)
            and (itally isnull or l.tallies[array_lower(l.tallies,1)] = itally)
            and (otally isnull or l.tallies[array_upper(l.tallies,1)] = otally);
raise notice ' found:% s:%', found, lrec.state;
        if found then curState = lrec.state; end if;
      end if;

      if recipe ? 'route' then if lrec.payor_ent notnull then
        if lrec.payee_ent notnull then
raise notice 'Lift local check O:% E:%', lrec.payor_ent, lrec.payee_ent;
          select into qrec uuids, signs
            from mychips.path_find(lrec.payor_ent, lrec.payee_ent, lrec.units) limit 1;
          if found then
raise notice ' found U:% S:% Q:%', qrec.uuids, qrec.signs, recipe->'update';
            update mychips.lifts_v set status = 'good', request = null, 
              agent_auth = recipe->'update'->'agent_auth', tallies = qrec.uuids, signs = qrec.signs
              where lift_uuid = lrec.lift_uuid and lift_seq = lrec.lift_seq returning state into curState;
            return to_json(curState);
          end if;
        end if;

        select into jrec json_agg(row_to_json(t)) from (
          select out_chad,top_chad,min,max,top_uuid from mychips.tallies_v_paths
          where inp = lrec.payor_ent and foro
          order by edges desc limit base.parm('lifts','fanout',10)
        ) t;
raise notice ' Lift route check:% c:%', recipe->'update', jsonb_array_length(jrec);
        upspec = recipe->'update';
        if jsonb_array_length(jrec) > 0 then		-- Found outbound paths
          upspec = upspec || jsonb_build_object('trans', jrec);	-- Temporary stash
        else
          upspec = upspec || jsonb_build_object('status', 'void', 'request', null);
        end if;
        recipe = jsonb_set(recipe, '{update}', upspec);
      end if; end if;		-- recipe ? 'route'

      if recipe ? 'pick' then		-- Pick a single path with the highest score
        jrec = recipe->'update'->'trans'->'plans';
raise notice ' Lift path pick s:% l:%', jrec->0->'sessionCode', jsonb_array_length(jrec);
        select into qrec idx,via,sum(score) as score
          from mychips.plan_score(jrec, lrec.origin->>'cuid') ps
          group by 1,2 order by 3 desc limit 1;
        if jrec notnull and qrec.idx notnull then
          upspec = recipe->'update';
          upspec = jsonb_set(upspec, '{trans, pick}', to_jsonb(qrec.idx), true);
          recipe = jsonb_set(recipe, '{update}', upspec);
raise notice ' p:%', qrec.idx;
        end if;
      end if;		-- recipe ? 'pick'

      if recipe ? 'promise' then	-- Populate lift with provisional chits
raise notice ' promise:% u:%', recipe->'promise', recipe->'update';
-- find the correct/best outbound segment for this lift
-- adjust upspec
        jrec = recipe->'promise';
        qstrg = (select user_ent from mychips.users where peer_agent = jrec->'sub'->>'agent' and peer_cuid = jrec->'sub'->>'cuid');
        select into qrec inp, ath, uuids, signs from mychips.pathx_find(
          (jrec->>'it')::uuid, qstrg, (jrec->>'ot')::uuid, (jrec->>'units')::bigint
        ) order by level desc, min limit 1;
        if qrec.uuids notnull and array_length(qrec.uuids,1) > 0 then
          upspec = recipe->'update';
          upspec = jsonb_set(upspec, '{tallies}', to_jsonb('{' || array_to_string(qrec.uuids,',') || '}'), true);
          upspec = jsonb_set(upspec, '{signs}', to_jsonb('{' || array_to_string(qrec.signs,',') || '}'), true);
          recipe = jsonb_set(recipe, '{update}', upspec);
        end if;
raise notice ' pr:%', qrec;
      end if;		-- recipe ? 'promise'

      if recipe ? 'insert' and recipe ? 'update' and curState = 'null' then
raise notice 'Lift insert s:% u:%', curState, recipe->'update';
        insert into mychips.lifts_v (
          lift_uuid, lift_date, life, units, tallies, signs, status, payor_auth, find, lift_type
        ) values (
          uuid, (obj->>'lift_date')::timestamptz, 
          (obj->>'life')::interval,
          (obj->>'units')::bigint, 
          (recipe->'update'->>'tallies')::uuid[],
          (recipe->'update'->>'signs')::int[],
          recipe->'update'->>'status',
          recipe->'update'->'payor_auth',
          recipe->'update'->'find',
          coalesce(recipe->'update'->>'lift_type', 'rel')
        ) returning json, state, tallies into lrec;
        return to_json(lrec);
        
      elsif recipe ? 'update' then
raise notice 'Lift update s:% u:%', curState, recipe->'update';

        if not (jsonb_build_array(curState) <@ (recipe->'context')) then	--Not in any applicable state (listed in our recipe context)
raise notice 'Lift Z:% C:%', jsonb_build_array(curState), recipe->'context';
          return to_jsonb(curState);
        end if;

        qstrg = mychips.state_updater(recipe, 'mychips.lifts_v', 
          '{status, request, origin, referee, find, lift_uuid, tallies, signs, signature, agent_auth, payor_auth, trans, record}', 
          case when recipe->'update' ? 'request' then '{}'::text[] else '{"request = null"}' end
        );
--raise notice 'SQL:% % %', qstrg, lrec.lift_uuid, lrec.lift_seq;
        execute qstrg || ' lift_uuid = $1 and lift_seq = $2 
          returning json, state, tallies' into lrec using lrec.lift_uuid, lrec.lift_seq;

        return to_json(lrec);
      end if;		-- recipe ? 'update'

      return null;
    end;
$$;}

# Notify user(s) of relevant state changes on a lift
#----------------------------------------------------------------
function {mychips.lift_notify_user(ent text, lift mychips.lifts)} {mychips.lifts} {
  returns record language plpgsql as $$
    declare
      jrec	jsonb;
    begin
--raise notice 'Lift user notify: mu_% % % -> %', ent, lift.lift_uuid, lift.lift_seq, lift.status;
      jrec = jsonb_build_object(
        'target',	'lift',
        'entity',	ent,
        'lift',		lift.lift_uuid,
        'seq',		lift.lift_seq,
        'units',	lift.units,
        'memo',		lift.payor_auth->'memo',
        'ref',		lift.payor_auth->'ref',
        'status',	lift.status
      );
      perform pg_notify('mu_' || ent, jrec::text);
      return lift;
    end;
$$;}

# Query the database for possible internal clearing lifts, initiating one or more if needed
# Potentially very slow--should not be used when the DB has more than a few users
#----------------------------------------------------------------
function {mychips.lift_loc_clr(maxNum int = 1)} {mychips.tallies_v_paths base.parm_v} {
  returns jsonb language plpgsql as $$
    declare
      status	jsonb = '{"done": 0}';
      prec	record;			-- Paths
      orders	text default 'bang desc';
      tstr	text;
      tarr	text[];
      oarr	text[];
      min_units	int default base.parm('lifts','minimum',1);		-- Only do lifts of this size or bigger
      ord_by	text default base.parm('lifts','order','bang desc'::text);	-- How to prioritize lifts to perform
      count	int default 0;
      rows	int;
    begin
--raise notice 'LC0:% % %', maxNum, min_units, ord_by;
      foreach tstr in array regexp_split_to_array(ord_by, ',') loop
        oarr = regexp_split_to_array(btrim(tstr), E'\\s+');
--raise notice 'LC1 tstr:% el0:%', tstr, oarr[1];
        tarr = array_append(tarr, quote_ident(oarr[1]) || case when oarr[2] = 'desc' then ' desc' else '' end);
      end loop;
      orders = array_to_string(tarr, ', ');
--raise notice 'LC2 orders:%', orders;

      while count < maxNum loop			-- Search for internal lifts
        tstr = 'select uuids, signs, min
          from mychips.tallies_v_paths where circuit and margin <= 0 and 
          min >= $1 order by ' || orders || ' limit 1';
        execute tstr into prec using min_units;		-- Look for the highest priority lift to execute
        get diagnostics rows = ROW_COUNT;
--raise notice 'LC3 rows:% min:% tstr:%', rows, min_units, tstr;
        if rows < 1 then exit; end if;

        insert into mychips.lifts (lift_type, circuit, status, units, tallies, signs)
          values ('in', true, 'good', prec.min, prec.uuids, prec.signs);
        count = count + 1;
      end loop;
    return jsonb_set(status, '{done}', count::text::jsonb);
    end;
$$;}

# Query the database for possible internal clearing lifts for a specified user
# Faster due to use of more focused search
#----------------------------------------------------------------
function {mychips.lift_loc_clr_user(id text, maxNum int = 1)} {
  mychips.paths_find(text,text,bigint,int) base.parm_v
} {
  returns jsonb language plpgsql as $$
    declare
      status	jsonb = jsonb_build_object('done', 0, 'id', id);
      prec	record;			-- Paths
      orders	text = 'bang desc';
      tstr	text;
      tarr	text[];
      oarr	text[];
      min_units	int = base.parm('lifts','minimum',1);		-- Only do lifts of this size or bigger
      ord_by	text = base.parm('lifts','order','bang desc'::text);	-- How to prioritize lifts to perform
      count	int = 0;
      rows	int;
    begin
--raise notice 'LCU0:% % % %', maxNum, min_units, ord_by, id;
      foreach tstr in array regexp_split_to_array(ord_by, ',') loop
        oarr = regexp_split_to_array(btrim(tstr), E'\\s+');
--raise notice 'LCU1 tstr:% el0:%', tstr, oarr[1];
        tarr = array_append(tarr, quote_ident(oarr[1]) || case when oarr[2] = 'desc' then ' desc' else '' end);
      end loop;
      orders = array_to_string(tarr, ', ');
--raise notice 'LCU2 orders:%', orders;

      while count < maxNum loop			-- Search for internal lifts
        tstr = 'select uuids, signs, min
          from mychips.paths_find($2) where circuit and margin <= 0 and 
          min >= $1 order by ' || orders || ' limit 1';
        execute tstr into prec using min_units, id;		-- Look for the highest priority lift to execute
        get diagnostics rows = ROW_COUNT;
--raise notice 'LCU3 rows:% min:% tstr:%', rows, min_units, tstr;
        if rows < 1 then exit; end if;

        insert into mychips.lifts (lift_type, circuit, status, units, tallies, signs)
          values ('in', true, 'good', prec.min, prec.uuids, prec.signs);
        count = count + 1;
      end loop;
      update mychips.users set _lift_check = current_timestamp where user_ent = id;
    return jsonb_set(status, '{done}', count::text::jsonb);
    end;
$$;}

# Try to do a clearing lift for the next queued user
#----------------------------------------------------------------
function {mychips.lift_next_user(maxNum int = 1)} {
  mychips.lift_loc_clr_user(text,int)
} {
  returns jsonb language plpgsql as $$
    declare
      trec	record;
    begin
      select into trec user_ent,_lift_check,crt_date from mychips.users u where exists (
        select 1 from mychips.tallies_v where tally_ent = u.user_ent and liftable
      ) order by _lift_check,crt_date limit 1;
      if found then
        return mychips.lift_loc_clr_user(trec.user_ent, maxNum);
      else
        return null;
      end if;
    end;
$$;}
  
# Attempt to create a local linear payment lift between the specified users
# OBSOLETE
#----------------------------------------------------------------
function {mychips.lift_loc_pay(from_id text, to_id text, units int)} {
  mychips.path_find(text,text,bigint,int)
} {
  returns boolean language plpgsql as $$
    declare
      prec	record;			-- Paths
    begin
raise notice 'LP0:% % %', from_id, to_id, units;
      select into prec uuids, signs
        from mychips.path_find(from_id, to_id, units) limit 1;
      if found then
        insert into mychips.lifts (lift_type, circuit, status, units, tallies, signs)
          values ('in', true, 'good', units, prec.uuids, prec.signs);
        return true;
      end if;
      return false;
    end;
$$;}

# Attempt a circular distributed lift (outdated, needs rework)
# OBSOLETE
#----------------------------------------------------------------
function {mychips.lift_clear_dist(maxNum int = 1)} {mychips.lifts_v mychips.routes_v_paths mychips.users_v} {
  returns int language plpgsql as $$
    declare
      prec	record;
      tstr	text;
      tarr	text[];
      oarr	text[];
      orders	text default 'bang desc';
      min_units	int default base.parm('lifts','minimum',1);		-- Only do lifts of this size or bigger
      ord_by	text default base.parm('lifts','order','bang desc'::text);	-- How to prioritize lifts to perform
      count	int = 0;
      rows	int;
    begin
--raise notice 'LD0:% % %', maxNum, min_units, ord_by;
      foreach tstr in array regexp_split_to_array(ord_by, ',') loop
        oarr = regexp_split_to_array(btrim(tstr), E'\\s+');
--raise notice 'LD1 tstr:% el0:%', tstr, oarr[1];
        tarr = array_append(tarr, quote_ident(oarr[1]) || case when oarr[2] = 'desc' then ' desc' else '' end);
      end loop;
      orders = array_to_string(tarr, ', ');
--raise notice 'LD2 orders:%', orders;

      while count < maxNum loop			-- Search for internal lifts
--        tstr = 'select bot,bot_tseq,top,top_tseq, bot_cuid,bot_agent, dst_cuid, dst_agent, min
        tstr = 'select uuids, min
          from mychips.routes_v_paths where segment and status = ''good'' and
             min >= $1 order by ' || orders || ' limit 1';
        execute tstr into prec using min_units;		-- Look for the highest priority lift to execute
        get diagnostics rows = ROW_COUNT;
--raise notice 'LD3 rows:% min:% tstr:%', rows, min_units, tstr;
        if rows < 1 then exit; end if;
      
        insert into mychips.lifts (lift_type, circuit, request, units, tallies)
          values ('org', true, 'init', prec.min, prec.uuids);
        count = count + 1;
      end loop;
      return count;
    end;
$$;}
