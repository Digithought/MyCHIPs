# Lift-based payments to and from other users
#Copyright MyCHIPs.org; See license in root of this package
#----------------------------------------------------------------
#TODO:
#- 
#require common.tcl glob.tcl trigview.tcl
module mychips

namespace eval pay {
    def pay_pk		{lift_uuid lift_seq}
    def pay_v_up	{find units payor_auth request}
    def pay_v_in	[concat $pay_pk $pay_v_up payor_ent lift_date]
    def pay_v_me_in	[concat $pay_pk $pay_v_up lift_date]
    def pay_se		[concat $pay_v_in status state json origin payee_ent $glob::stampfn]
}

# Trigger to fire upon creation of payment type lifts
#----------------------------------------------------------------
function mychips.lifts_tf_bpiu() {mychips.lifts mychips.users_v} {
  returns trigger language plpgsql security definer as $$
    declare
      trec	record;
      i		int;
    begin
      if new.payor_ent notnull and new.origin isnull then
        select into new.origin jsonb_build_object(		-- Build origin field if it doesn't exist
          'cid',	peer_cid,
          'agent',	peer_agent
        ) from mychips.users_v where user_ent = new.payor_ent;
      end if;

      if new.find notnull and new.payee_ent isnull then		-- Is payee local to our system?
        select into new.payee_ent user_ent from mychips.users_v
          where peer_cid = new.find->>'cid' and peer_agent = new.find->>'agent';
      end if;

      return new;
    end;
$$;}
trigger mychips_lifts_tr_bpiu {} {
    before insert or update on mychips.lifts for each row when (new.lift_type = 'pay')
      execute procedure mychips.lifts_tf_bpiu();
}

# Payments view
#----------------------------------------------------------------
view mychips.lifts_v_pay {mychips.users_v mychips.lifts_v} {select
    eval(fld_list $pay::pay_se l)
  
    from	mychips.lifts_v		l;

    eval(trigview::insert mychips.lifts_v_pay mychips.lifts $pay::pay_v_in $pay::pay_pk [concat lift_type 'pay' $glob::stampin]);
    eval(trigview::update mychips.lifts_v_pay mychips.lifts $pay::pay_v_up $pay::pay_pk $glob::stampup);
    eval(rule_delete mychips.lifts_v_pay mychips.lifts $pay::pay_pk {old.status = 'void'});
}

# User-permissioned view of payments
#----------------------------------------------------------------
view mychips.lifts_v_pay_me {mychips.lifts_v_pay base.curr_eid()} {select 
    p.payor_ent			as id
  , p.lift_uuid
  , p.lift_seq
  , p.lift_date
  , p.payor_auth
  , p.find
  , p.status
  , p.request			as request
  , p.units			as units
  , -p.units			as net
  , p.payor_auth->'memo'	as memo
  , p.payor_auth->'ref'		as reference
    from	mychips.lifts_v_pay	p
    where	p.payor_ent = base.curr_eid()
  union all select
    p.payee_ent			as id
  , p.lift_uuid
  , p.lift_seq
  , p.lift_date
  , p.payor_auth
  , p.find
  , p.status
  , null::text			as request
  , p.units			as units
  , p.units			as net
  , p.payor_auth->'memo'	as memo
  , p.payor_auth->'ref'		as reference
    from	mychips.lifts_v_pay	p
    where	p.payee_ent = base.curr_eid()
    
    eval(trigview::insert mychips.lifts_v_pay_me mychips.lifts $pay::pay_v_me_in $pay::pay_pk [concat $glob::stampin {payor_ent session_user}]);
    eval(trigview::update mychips.lifts_v_pay_me mychips.lifts $pay::pay_v_up $pay::pay_pk $glob::stampup);
    eval(rule_delete mychips.lifts_v_pay_me mychips.lifts $pay::pay_pk {old.status = 'void'});
} -grant {
    {lift	s {s i u d}}
}
