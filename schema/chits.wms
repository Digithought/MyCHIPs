#Schema for storing MyCHIPs tallies
#Copyright MyCHIPs.org; See license in root of this package
#----------------------------------------------------------------
#TODO:
#X- Tweak state diagram to include concept of a pending chit
#X- Compute separate sums in tally for pending, good sums
#X- Include field in tally for latest confirmed chit record
#X- Routes/lifts should honor pending sums?
#- Update chain_conf field in mychips.tallies when checksum confirmed with other half
#- Test for scenario in notes: Mar 28, 2020; skipped over chits from network discontinuity
#- Failed lift chits get set to void
#- Good status check includes validating actual digital signature
#- Each hit needs the signature of the party sending value (depends on the sign of units)
#- What to do if record gets into 'undefined' state? (mark as void?)
#- Should _bu trigger include a call to chit_state to make sure status is consistent with state?
#- 
module mychips
require config.tcl trigview.tcl

namespace eval chits {
    def chits_pk	{chit_ent chit_seq chit_idx}
    def chits_v_up	{request signature units quidpro memo}
    def chits_v_in	[concat chit_ent chit_seq $chits_v_up chit_guid chit_type]
    def chits_se	[concat chit_ent chit_seq chit_idx $chits_v_up chit_guid chit_type $glob::stampfn chit_date chain_idx chain_prv lift_seq status digest]
}

table mychips.chits {mychips.tallies mychips.lifts} {
    chit_ent	text
  , chit_seq	int	      , foreign key (chit_ent, chit_seq) references mychips.tallies on update cascade on delete cascade
  , chit_idx	int	      , primary key (chit_ent, chit_seq, chit_idx)
  , chit_guid	uuid		not null
  , chit_type	text		not null default 'tran' constraint "!mychips.tallies.BCT" check(chit_type in ('lift','tran'))
  , chit_date	timestamptz	not null default current_timestamp
  , request	text	        constraint "mychips.tallies.BRQ" check (request is null or request in ('userDraft','userRequest','userAgree','userDecline'))
  , signature	text
  , units	bigint		not null
  , quidpro	text
  , memo	text
  , status	text		not null default 'void' constraint "!mychips.tallies.BST" check(status in ('void','pend','good') and (status != 'good' or (request is null and not signature is null and signature != 'void')))
  , digest	bytea		
  , chain_prv	bytea
  , chain_idx	int	      , unique(chit_ent, chit_seq, chain_idx)
  , lift_seq	int           , foreign key (chit_guid, lift_seq) references mychips.lifts (lift_guid, lift_seq) on update cascade on delete cascade
  , constraint "!mychips.tallies.BLL" check (chit_type = 'lift' and not lift_seq isnull or chit_type != 'lift' and lift_seq isnull)
    eval(s $glob::stamps)
}
index {} mychips.chits chit_guid
index {} mychips.chits chit_type
index {} mychips.chits chit_date
index {} mychips.chits status

table mychips.chit_tries {mychips.chits} {
    ctry_ent	text	      , primary key (ctry_ent, ctry_seq, ctry_idx)
  , ctry_seq	int
  , ctry_idx	int	      , foreign key (ctry_ent, ctry_seq, ctry_idx) references mychips.chits on update cascade on delete cascade
  , tries	int		not null default 1
  , last	timestamptz	not null default current_timestamp
}

# Generate unique sequence for new chit
#----------------------------------------------------------------
function mychips.chits_tf_seq() {mychips.tallies mychips.chit_goodcheck(mychips.chits)} {
  returns trigger language plpgsql security definer as $$
    begin
        if new.chit_idx is null then			-- update should lock the mychips.tallies row until transaction completes
          update mychips.tallies set _last_chit = greatest(
              coalesce(_last_chit,0) + 1,
              (select coalesce(max(chit_idx),0)+1 from mychips.chits where chit_ent = new.chit_ent and chit_seq = new.chit_seq)
            ) where tally_ent = new.chit_ent and tally_seq = new.chit_seq
              returning _last_chit into new.chit_idx;
          if not found then new.chit_idx = 1; end if;
-- select into new.chit_idx coalesce(max(chit_idx),0)+1 from mychips.chits where chit_ent = new.chit_ent and chit_seq = new.chit_seq; -- Not safe for concurrent sessions
        end if;

        if new.status = 'good' then		-- A received, signed chit can come in marked as good
          return mychips.chit_goodcheck(new);
        end if;
        return new;
    end;
$$;}
trigger mychips_chits_tr_seq {} {
    before insert on mychips.chits for each row execute procedure mychips.chits_tf_seq();
}

# Before updating each chit record
#----------------------------------------------------------------
function mychips.chits_tf_bu() {mychips.chit_goodcheck(mychips.chits)} {
  returns trigger language plpgsql security definer as $$
    begin
      if new.status = 'good' and old.status != 'good' then
        return mychips.chit_goodcheck(new);
      end if;
      return new;
    end;
$$;}
trigger mychips_chits_tr_bu {} {
    before update on mychips.chits for each row execute procedure mychips.chits_tf_bu();
}

# Cache tally totals when the chits change
#----------------------------------------------------------------
function mychips.chits_tf_cache() {mychips mychips.chits_v} {
  returns trigger language plpgsql security definer as $$
    declare
      trec	record;
--      crec	record;
    begin
      if TG_OP = 'DELETE' then trec = old; else trec = new; end if;

-- Not sure which if one of these approaches is more efficient:
--      select into crec sum(units_g) as units_g, sum(units_p) as units_p from mychips.chits_v where chit_ent = trec.chit_ent and chit_seq = trec.chit_seq;
--      update mychips.tallies set mod_date = current_timestamp, mod_by = session_user, units_gc = coalesce(crec.units_g,0), units_pc = coalesce(crec.units_p,0) where tally_ent = trec.chit_ent and tally_seq = trec.chit_seq;

      update mychips.tallies set mod_date = current_timestamp, mod_by = session_user, units_gc = coalesce(cs.sum_g,0), units_pc = coalesce(cs.sum_p,0) 
      from (select chit_ent, chit_seq, sum(units_g) as sum_g, sum(units_p) as sum_p from mychips.chits_v group by 1,2) as cs
      where cs.chit_ent = mychips.tallies.tally_ent and cs.chit_seq = mychips.tallies.tally_seq
      and tally_ent = trec.chit_ent and tally_seq = trec.chit_seq;

      return null;
    end;
$$;}
trigger mychips_chits_tr_cache {} {
    after insert or update or delete on mychips.chits for each row execute procedure mychips.chits_tf_cache();
}

# Quality check for a chit as it goes into status: good
#----------------------------------------------------------------
function {mychips.chit_goodcheck(ch mychips.chits)} {mychips.chit_json(mychips.chits) mychips.chits_v mychips.j2h(jsonb)} {
  returns mychips.chits language plpgsql security definer as $$
    declare
      trec	record;
      crec	record;
      prevhash	bytea;				-- Previous Hash
      thisidx	int;
    begin

      if ch.signature isnull then		-- Fixme: check actual signature validity here
        return null;
      end if;

      select into trec tally_ent,tally_seq,tally_type,digest,chain_conf from mychips.tallies where tally_ent = ch.chit_ent and tally_seq = ch.chit_seq;
      if not found or trec.digest is null then		-- Can we find a valid tally to add this chit to?
        raise exception 'Attempted chit link to invalid tally: %-%-%', trec.tally_ent, trec.tally_seq, trec.tally_type;
        return null;
      end if;

      select into crec * from mychips.chits where chit_ent = ch.chit_ent and chit_seq = ch.chit_seq and not digest isnull order by chain_idx desc limit 1;
      if found then				-- Can we find the previous end of chain?
        thisidx = greatest(crec.chain_idx + 1, 1);
        prevhash = crec.digest;
      else
        thisidx = 1;				-- First chit in the chain
        prevhash = trec.digest;
      end if;

      if trec.tally_type = 'foil' then		-- Consensus algorithm for chit hash-chain:
        ch.chain_idx = thisidx;			-- Foil ignores any specified index, just append at end of its chain
        ch.chain_prv = prevhash;
        ch.digest = mychips.j2h(mychips.chit_json(ch));

      else					-- We hold a stock, which must conform to foil
        if ch.chain_idx isnull then		-- Stock has no specified index, append at end of chain
          ch.chain_idx = thisidx;
          if ch.digest isnull then ch.digest = mychips.j2h(mychips.chit_json(ch)); end if;
          if ch.chain_prv isnull then ch.chain_prv = prevhash; end if;

        elsif ch.chain_idx >= 1 and ch.chain_idx <= thisidx then	-- There are existing chits in our way; stock must conform
          update mychips.chits set chain_idx = chain_idx + 1,		-- Bump chits that are in my way
            chain_prv = case when mychips.chits.chain_idx = ch.chain_idx then
              ch.digest				-- First bumped record gets our hash
            else				-- All others grab their younger sibling's
              (select digest from mychips.chits pc where pc.chit_ent = ch.chit_ent and pc.chit_seq = ch.chit_seq and pc.chain_idx + 1 = mychips.chits.chain_idx)
            end
              where chit_ent = ch.chit_ent and chit_seq = ch.chit_seq and chit_idx != ch.chit_idx and chain_idx >= ch.chain_idx;

          update mychips.chits uc set digest = mc.digest_v			-- Repair bumped digests
            from mychips.chits_v mc where mc.chit_ent = uc.chit_ent and mc.chit_seq = uc.chit_seq and mc.chit_idx = uc.chit_idx		-- self join to grab json fields
              and uc.chit_ent = ch.chit_ent and uc.chit_seq = ch.chit_seq and uc.chit_idx != ch.chit_idx and uc.chain_idx >= ch.chain_idx;	-- All bumped records
        end if;
        
      end if;
--raise notice 'Chain: idx:% hash:% prv:%', ch.chain_idx, ch.digest, ch.chain_prv;
      return ch;
    end;
$$;}

# Notify the peer server process of chit state changes that need attention in the database
#----------------------------------------------------------------
function {mychips.chit_notify(chit mychips.chits)} {mychips.users_v mychips.chits_v mychips.tallies_v mychips.chit_tries} {
  returns boolean language plpgsql security definer as $$
    declare
        act	text	= chit.request;
        channel	text	= 'mychips_peer';
        jrec	jsonb;			-- Holds notify record
        trec	record;			-- Talley
        urec	record;			-- User
        rrec	record;			-- Retries
    begin
        if act is null then return false; end if;	-- Redundant?
        
        select into trec part_cid,user_cid,tally_guid,part_sock from mychips.tallies_v where tally_ent = chit.chit_ent and tally_seq = chit.chit_seq;
        select into urec serv_id from mychips.users_v where user_ent = chit.chit_ent;
        if not urec.serv_id is null then
            channel = channel || '_' || urec.serv_id;
        end if;
        insert into mychips.chit_tries (ctry_ent, ctry_seq, ctry_idx) values (chit.chit_ent, chit.chit_seq, chit.chit_idx)
          on conflict (ctry_ent,ctry_seq,ctry_idx) do update set tries = mychips.chit_tries.tries + 1, last = current_timestamp
            returning * into rrec;
        
        jrec = jsonb_build_object(		--Fixme: get rid of what is redundant with {object} or otherwise not needed
          'target',	'chit',
          'peer',	trec.part_cid,
          'user',	trec.user_cid,
          'entity',	chit.chit_ent,
          'tally',	trec.tally_guid,
          'action',	act,
          'try',	rrec.tries,
          'last',	rrec.last,
          'at',		trec.part_sock,
          'object',	(select json from mychips.chits_v where chit_ent = chit.chit_ent and chit_seq = chit.chit_seq and chit_idx = chit.chit_idx)
        );
--raise notice 'Chit notice:% %', channel, jrec::text;
        perform pg_notify(channel, jrec::text);
        return true;
    end;
$$;}

# Generate notifications about updated chits for listening peer servers
#----------------------------------------------------------------
function mychips.chits_tf_notify() {mychips.chits mychips.chit_notify(mychips.chits)} {
  returns trigger language plpgsql security definer as $$
    declare
        dirty	boolean default false;
    begin
        if TG_OP = 'INSERT' then
            dirty = true;
        elsif new.request is not null and new.request is distinct from old.request then
            dirty = true;
        end if;
--raise notice 'Chit update: %', dirty;
        if dirty then perform mychips.chit_notify(new); end if;
        return new;
    end;
$$;}
trigger mychips_chits_tr_notice {} {
    after insert or update on mychips.chits for each row execute procedure mychips.chits_tf_notify();
}

# Compute current state of this chit
#----------------------------------------------------------------
function {mychips.chit_state(isdebit boolean, request text, signature text)} {mychips} {
  returns text immutable language plpgsql as $$
    begin return
      case when isdebit then
        case when signature = 'void'		then 'peerDecline'
           when request = 'userRequest'		then 'userRequest'
           when request is null and signature is not null	then 'peerValid'
           when request is null			then 'userInvoice'
           else					     'undefined'	end
      else	--is a credit
        case when signature = 'void' then
        case when request = 'userDecline'	then 'userDecline'
             when request is null		then 'userVoid'
             else				     'undefined'    end
           when signature is null then
        case when request is null		then 'peerInvoice'
             else				     'undefined'    end
           when request = 'userAgree'		then 'userAgree'
           when request = 'userDraft'		then 'userDraft'
           when request is null			then 'userValid'
      else     					     'undefined'	end
      end;
    end;
$$;}

# Indicates if the chit is finalized
#----------------------------------------------------------------
#function {mychips.chit_open(request text, signature text)} {mychips.chits} {
#  returns boolean immutable language sql as $$
#      select request is null and not signature is null and signature != 'void'
#$$;}

# Compute standard json output for a chit
#----------------------------------------------------------------
function {mychips.chit_json(ch mychips.chits)} {mychips.chits} {
  returns jsonb stable language sql as $$
    select jsonb_build_object(
       'index',		ch.chain_idx,
       'prior',		ch.chain_prv,
       'guid',		ch.chit_guid,
       'type',		ch.chit_type,
       'date',		ch.chit_date,
       'units',		ch.units,
       'for',		ch.quidpro,
       'signed',	ch.signature
    )
$$;}

# Base view of chits
#----------------------------------------------------------------
define isdebit {te.tally_type = 'stock' and ch.units >= 0 or te.tally_type = 'foil' and ch.units < 0}
view mychips.chits_v {mychips.chits mychips.tallies_v mychips.chit_state(boolean,text,text) mychips.chit_json(mychips.chits) mychips.j2h(jsonb)} {select 
    eval(fld_list $chits::chits_se	ch)
  , te.user_cid
  , te.part_cid
  , te.tally_type
  , te.tally_guid
  , case when isdebit() then 'debit' else 'credit' end		as effect
  , case when ch.status = 'good' then ch.units else 0 end	as units_g
  , case when ch.status = 'void' then 0 else ch.units end	as units_p

  , mychips.chit_state(isdebit(), ch.request, ch.signature)	as state
  , mychips.chit_state(isdebit(), ch.request, ch.signature) = any(array['peerInvoice','peerDecline']) as action
  , mychips.chit_json(ch)					as json_core
  , mychips.chit_json(ch) || jsonb_build_object(
      'digest',		ch.digest
    )								as json
  , mychips.j2h(mychips.chit_json(ch)) as digest_v
  , mychips.j2h(mychips.chit_json(ch)) = coalesce(ch.digest,'') as clean

    from	mychips.chits		ch
    join	mychips.tallies_v	te on te.tally_ent = ch.chit_ent and te.tally_seq = ch.chit_seq;

    eval(trigview::insert mychips.chits_v mychips.chits $chits::chits_v_in $chits::chits_pk [concat $glob::stampin {request 'userDraft'}]);
    eval(trigview::update mychips.chits_v mychips.chits $chits::chits_v_up $chits::chits_pk $glob::stampup);
} -grant {
    {chit	{s} {i u} {d}}
}

# User view of chits
#----------------------------------------------------------------
view mychips.chits_v_me {mychips.chits_v mychips.tallies_v_me} {select 
    c.*
    from	mychips.chits_v c
    join	mychips.tallies_v_me t on c.chit_ent = t.tally_ent and c.chit_seq = t.tally_seq
} -grant {
    {chit	{s} {s i u} {d}}
}

# Process chit state transitions requested by the peer server process
#----------------------------------------------------------------
function {mychips.chit_process(msg jsonb, recipe jsonb)} {mychips.users_v mychips.chits_v} {
  returns text language plpgsql as $$
    declare
        cid		text	= msg->>'user';
        obj		jsonb	= msg->'object';
        guid		uuid	= obj->>'guid';
        curState	text;
        qstrg		text;		-- Temporary string
        crec		record;		-- Holds chit record(s)
        trec		record;		-- Holds associated tally
        erec		record;		-- Tally entity, we will ignore the one in msg
    begin
        select into erec id, serv_id from mychips.users_v where peer_cid = cid;
        if not found then return null; end if;

        select into crec chit_ent, chit_seq, chit_idx, state from mychips.chits_v where chit_ent = erec.id and chit_guid = guid;
        curState = crec.state;
--raise notice 'Chit cid:% entity:% state:% recipe:%', cid, crec.chit_ent, curState, recipe;
        if not found then
            curState = 'null';		-- Special code for when the specified chit doesn't exist yet
        end if;

        if not (jsonb_build_array(curState) <@ (recipe->'context')) then	--Not in any applicable state (listed in our recipe context)
--raise notice 'Z:% C:%', jsonb_build_array(curState), recipe->'context';
            return curState;
        end if;

        if recipe ? 'upsert' then
raise notice '  upsert curState:% obj:%', curState, obj;
          if curState = 'null' then			-- Need to do insert
            select into trec * from mychips.tallies where tally_ent = erec.id and tally_guid = (msg->>'tally')::uuid;
            if not found then return null; end if;
            
            execute 'insert into mychips.chits (chit_ent,chit_seq,chit_guid,chit_type,chit_date,status,signature,units,quidpro,memo,chain_idx,chain_prv,digest) values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)
                     returning chit_ent, chit_seq, chit_idx, chain_idx, chain_prv, digest' into crec
              using trec.tally_ent, trec.tally_seq, guid, obj->>'type', (obj->>'date')::timestamptz, recipe->'upsert'->>'status', obj->>'signed', (obj->>'units')::bigint, obj->>'for', obj->>'memo', (obj->'index')::int, (obj->>'prior')::bytea, (obj->>'digest')::bytea;
raise notice '  upsert post:% % %', trec.tally_type, obj->'index', crec;
          else						-- Chit already exists, do update

--Test: When does update part of upsert get called? (when renegotiating a previously refused chit?)
            execute 'update mychips.chits set signature = $1, units = $2, status = $3, quidpro = $4, memo = $5, request = null, mod_date = current_timestamp, mod_by = session_user where chit_ent = $6 and chit_seq = $7 and chit_idx = $8'
                using obj->>'signed', (obj->>'units')::bigint, recipe->'upsert'->>status, obj->>'link', obj->>'memo', crec.chit_ent, crec.chit_seq, crec.chit_idx;
            delete from mychips.chit_tries where ctry_ent = crec.chit_ent and ctry_seq = crec.chit_seq and ctry_idx = crec.chit_idx;
          end if;
        end if;

        if recipe ? 'update' then			-- There's an update key in the recipe
          qstrg = mychips.state_updater(recipe, 'mychips.chits', '{signature, status}');
--raise notice 'SQL:%', qstrg;
          execute qstrg || ' chit_ent = $1 and chit_seq = $2 and chit_idx = $3' using crec.chit_ent, crec.chit_seq, crec.chit_idx;
          delete from mychips.chit_tries where ctry_ent = crec.chit_ent and ctry_seq = crec.chit_seq and ctry_idx = crec.chit_idx;
        end if;

        select into crec chit_ent,chit_seq,chit_idx,state,action,json from mychips.chits_v where chit_ent = crec.chit_ent and chit_seq = crec.chit_seq and chit_idx = crec.chit_idx;
        if crec.action or (crec.state = 'peerValid' and (curState is distinct from 'peerValid')) then	-- Also notify if changed to valid state
--raise notice '  chit notify for user channel: mychips_user_%', crec.chit_ent;
            perform pg_notify('mychips_user_' || crec.chit_ent, crec.json::text);
            perform pg_notify('mychips_user', crec.json::text);		-- Simulations use this
        end if;
        return crec.json;
    end;
$$;}

# Recursive view of chit chains to test integrity of each chain
#----------------------------------------------------------------
view mychips.chits_v_chains {mychips.chits_v mychips.tallies_v} {
  with recursive chit_chain(ent, seq, digest, chain_idx, chain_prv, prev_ok, hash_ok, length, guids, cycle) as (
    select	t.tally_ent, t.tally_seq, t.digest, -1::int, null::bytea, true, 
      t.digest_v = t.digest, 0::int, array[t.tally_guid], false
    from	mychips.tallies_v t
  union all
    select c.chit_ent					as ent
      , c.chit_seq					as seq
      , c.digest					as digest
      , c.chain_idx					as chain_idx
      , c.chain_prv					as chain_prv
      , cc.prev_ok and (c.chain_prv = cc.digest)	as prev_ok
      , cc.hash_ok and (c.digest_v = c.digest)		as hash_ok
      , cc.length + 1					as length
      , cc.guids || c.chit_guid				as guids
      , c.chit_guid = any(cc.guids)			as cycle
    from	chit_chain	cc
    join	mychips.chits_v	c on c.chit_ent = cc.ent and c.chit_seq = cc.seq and c.chain_idx = cc.chain_idx + 1
  ) select
    ccc.ent
  , ccc.seq
  , ccc.digest
  , ccc.chain_idx
  , ccc.chain_prv
  , ccc.prev_ok
  , ccc.hash_ok
  , ccc.prev_ok and ccc.hash_ok as ok
  , ccc.chain_idx = cm.max as last
  , ccc.length
  , ccc.guids
  from chit_chain ccc -- where ccc.length > 1
  join (select chit_ent,chit_seq,max(chain_idx) as max from mychips.chits group by 1,2) cm on cm.chit_ent = ccc.ent and cm.chit_seq = ccc.seq
}
