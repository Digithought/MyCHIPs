#Data about mychips entities, kept whether or not they are represented by this server
#Copyright MyCHIPs.org; See license in root of this package
#----------------------------------------------------------------
#TODO:
#- Split out peer fields from users table
#- Can I have a 3-way writable multiview?
#- View should tell if there are active tallies with this peer or not
#- 
require multiview.tcl base.tcl config.tcl

module mychips
schema mychips {} -grant mychips
other lockdown {mychips} {
  revoke all on schema public from public;
  grant all on schema public to subst($mychips::adminuser);
} {
  grant create, usage on schema public to public;
}

namespace eval peers {
    def peers_pk	{peer_ent}
    def peers_v_up	{peer_cid peer_hid peer_psig peer_cmt}
    def peers_v_in	[concat $peers_pk $peers_v_up peer_agent]
    def peers_se	[concat $peers_v_in crt_by crt_date mod_by]
    def ent_se		[concat $base::ent_pk $base::ent_v_in ent_num std_name frm_name giv_name cas_name conn_pub]
    def ent_v_in	$base::ent_v_in
    def ent_v_up	[lremove $base::ent_v_up ent_type username]
    def agents_se	{agent_key agent_host agent_port}
}

# Data about peers to facilitate their CHIP account
#----------------------------------------------------------------
table mychips.peers {base.ent mychips.agents} {
    peer_ent	text		primary key references base.ent on update cascade on delete cascade
  , peer_cid	text		not null, unique (peer_cid, peer_agent)
  , peer_hid	text		
  , peer_agent	text	        references mychips.agents on update cascade on delete restrict
  , peer_psig	text		unique
  , peer_cmt	text
    eval(s $glob::stamps)
}

# Special user-readable view to read certain user site defaults
#----------------------------------------------------------------
view mychips.parm_v_user {base.parm} {select
    (select v_text from base.parm where module = 'mychips' and parm = 'user_host') as uhost
  , (select v_int  from base.parm where module = 'mychips' and parm = 'user_port') as uport
  , (select v_text from base.parm where module = 'mychips' and parm = 'peer_agent') as pagent
  , (select v_text from base.parm where module = 'mychips' and parm = 'peer_host') as phost
  , (select v_int  from base.parm where module = 'mychips' and parm = 'peer_port') as pport
}

# Base view of peers, linked to entity table
#----------------------------------------------------------------
define cAgent {coalesce(pe.peer_agent, pp.pagent)}
define cHost {coalesce(ag.agent_host, pp.phost)}
define cPort {coalesce(ag.agent_port, pp.pport)}
view mychips.peers_v {mychips.peers base.ent_v mychips.parm_v_user mychips.agents} {select 
    eval(fld_list $peers::ent_se	ee)
  , eval(fld_list $peers::peers_se	pe)
  , eval(fld_list $peers::agents_se	ag)
  , ag.agent_host		as peer_host
  , ag.agent_port		as peer_port
  , cAgent()			as peer_cagent
  , cHost()			as peer_chost
  , cPort()			as peer_cport
  , cHost() || ':' || cPort()	as peer_sock
  , pe.peer_cid ||':'|| cAgent() ||'@'|| cHost() ||':'|| cPort()	as peer_addr
--  , pe.peer_cid || '@' || cHost() || ':' || cPort()			as peer_endp
  , greatest(ee.mod_date, pe.mod_date) as mod_date

    from	base.ent_v	ee
    left join	mychips.peers	pe on pe.peer_ent = ee.id
    left join	mychips.agents	ag on ag.agent = pe.peer_agent
    join	mychips.parm_v_user pp on true;

    eval(multiview::insert mychips.peers_v "
        {base.ent	{$base::ent_v_in}	{$base::ent_pk}		{$glob::stampup}}
        {mychips.peers	{$peers::peers_v_in}	{$peers::peers_pk}}
    " {} mychips.peers_vf_pre)
    eval(multiview::update mychips.peers_v "
        {base.ent	{$peers::ent_v_up}	{$base::ent_pk}		{$glob::stampup}}
        {mychips.peers	{$peers::peers_v_up}	{$peers::peers_pk}	{$glob::stampup}}
    ")
    eval(multiview::delete mychips.peers_v "
        {mychips.peers	{$peers::peers_pk}	{(old.crt_by = session_user and (current_timestamp - old.crt_date) < '2 hours'::interval) or base.priv_has('userim',3)}}
    ")
} -primary id
#        {mychips.agents	{$agents::agents_v_up}	{$agents::agents_pk} {} {peer_agent}}

# Pre-check agent info for new peer records
#----------------------------------------------------------------
function {mychips.peers_vf_pre(new mychips.peers_v, old mychips.peers_v, tgop text)} {mychips.peers_v mychips.agents} {
  returns mychips.peers_v language plpgsql security definer as $$
    begin
raise notice 'peers_v_pre: % % %', new.peer_agent, new.peer_host, new.peer_port;
      if not new.peer_agent isnull and not exists (select agent from mychips.agents where agent = new.peer_agent) then
        insert into mychips.agents (agent, agent_host, agent_port) values (new.peer_agent, new.peer_host, new.peer_port);
      end if;
      return new;
    end;
$$;}

# Quality check for new/update peer records
#----------------------------------------------------------------
#function {mychips.peers_vf_post(new mychips.peers_v, old mychips.peers_v, tgop text)} {mychips.peers_v} {
#  returns mychips.peers_v language plpgsql security definer as $$
#    begin
#raise notice 'peers_v_post: % % %', new.peer_agent, new.peer_host, new.peer_port;
#      return new;
#    end;
#$$;}

# View of peers with primary address and contact points
#----------------------------------------------------------------
view mychips.peers_v_flat {mychips.peers_v base.addr_v_flat base.comm_v_flat} {select 
    p.*
  , a.bill_addr, a.bill_city, a.bill_state, a.bill_pcode, a.bill_country
  , a.ship_addr, a.ship_city, a.ship_state, a.ship_pcode, a.ship_country
  , c.phone_comm, c.cell_comm, c.email_comm, c.web_comm

    from	mychips.peers_v		p
    left join	base.addr_v_flat	a on a.id = p.id
    left join	base.comm_v_flat	c on c.id = p.id
}

# View of my peers
#----------------------------------------------------------------
view mychips.peers_v_me {mychips.peers_v mychips.tallies base.user_id(text)} {select 
    p.*
  , t.count		as count

    from	mychips.peers_v		p
    join	(select tally_ent, tally_seq, partner, status, count(*) as count from mychips.tallies where status = 'open' and tally_ent = base.user_id(session_user) group by 1,2,3,4) t on t.partner = p.peer_ent
} -grant {
    {peer	s {s i u} {d}}
} -primary id

# Return the stocket address of a peer
#----------------------------------------------------------------
function mychips.peer_sock(text) {mychips.peers_v} {
  returns text stable language sql as $$
    select peer_sock from mychips.peers_v where id = $1;
$$;}

# Generate notifications about new or updated peers for listening admin servers
#----------------------------------------------------------------
trigger mychips_peers_tr_change {} {
    after insert or update or delete on mychips.peers for each statement execute procedure mychips.change_tf_notify('peers');
}

# Before insert/update
#----------------------------------------------------------------
function mychips.peers_tf_biu() {mychips.peers mychips.ba2b64v(bytea)} {
  returns trigger language plpgsql security definer as $$
    begin
        if new.peer_hid isnull then
          loop
            select into new.peer_hid mychips.ba2b64v(decode(lpad(md5(random()::text),12), 'hex'));	--Make random string
            if not exists (select peer_ent from mychips.peers where peer_hid = new.peer_hid) then
              exit;					-- Make sure it is unique
            end if;
          end loop;
        end if;
        return new;
    end;
$$;}
trigger mychips_peers_tr_biu {} {
    before update on mychips.peers for each row execute procedure mychips.peers_tf_biu();
}
