#Schema for chit chain consensus functions
#Copyright MyCHIPs.org; See license in root of this package
#----------------------------------------------------------------
#There are three sources for new chits that can potentially result in a trigger firing:
#- Chits sent from the peer via the agent; created/updated in chit_process (stock & foil)
#- Approved by our local user; created/update in chit_process (stock & foil)
#- Chits added/modified as part of this consensus model; chain_process (stock only)
#Since chain_consense is executed in trigger space, we need to take care not to cause
#further triggers (by inserting/upd'ating) chits in that routine.
#TODO:
#- How/where do we detect the consensus error state?
#- Make a query that can find/restart stalled chain activity (call periodically)
#- Call it periodically from the agent scheduler
#- 
module mychips

# Compute current consensus state of this chit
#----------------------------------------------------------------
function {mychips.chit_cstate(ch mychips.chits, ta mychips.tallies)} {mychips.chits} {
  returns text immutable language sql as $$
    select case
      when ch.chain_idx isnull then			'Unlinked'
      when ch.chain_idx <= ta.chain_conf then		'Linked'
      when ch.chain_msg notnull then			'Notify'
      when ch.request = 'good' then			'Linking'
      else						'Pending' end
$$;} -grant mychips

# Ratchet confirmed chain index forward to specified value
#----------------------------------------------------------------
function {mychips.chain_ratchet(ent text, seq int, index int)} {mychips.tallies} {
  returns int language sql as $$
    update mychips.tallies set chain_conf = index
    where tally_ent = ent and tally_seq = seq and (chain_conf isnull or chain_conf < index)
    returning chain_conf;
$$;}

# Return the digest of the specified chit/tally in a chain
#----------------------------------------------------------------
function {mychips.chit_digest(ent text, seq int, index int)} {mychips.chits} {
  returns bytea language sql as $$
     select case when index = 0 then (
       select digest from mychips.tallies where tally_ent = ent and tally_seq = seq
     ) else (
       select chain_dgst from mychips.chits
         where chit_ent = ent and chit_seq = seq and chain_idx = index
     ) end
$$;}

# Build an acknowledgement message
#----------------------------------------------------------------
function {mychips.msg_ack(index int, digest bytea)} {mychips.ba2b64v(bytea)} {
  returns jsonb language sql as $$
    select jsonb_build_object(
      'cmd',	'ack',
      'index',	index,
      'hash',	mychips.ba2b64v(digest)
    )
$$;}

# Build a negative acknowledgement message
#----------------------------------------------------------------
function {mychips.msg_nak(index int, digest bytea = null)} {mychips.ba2b64v(bytea)} {
  returns jsonb language sql as $$
    select jsonb_strip_nulls(jsonb_build_object(
      'cmd',	'nak',
      'index',	index,
      'hash',	mychips.ba2b64v(digest)
    ))
$$;}

# Build an update message
#----------------------------------------------------------------
function {mychips.msg_upd(chits jsonb)} {mychips.ba2b64v(bytea)} {
  returns jsonb language sql as $$
    select jsonb_build_object(
      'cmd',	'upd',
      'chits',	chits
    )
$$;}

# Attempt to link the current chit insert/update into our chain
#----------------------------------------------------------------
function {mychips.chain_consense(ch mychips.chits, ta mychips.tallies)} {
  mychips.chits_v
  mychips.chit_json_h(mychips.chits,mychips.tallies)
  mychips.chit_json_r(mychips.chits,mychips.tallies)
  mychips.chit_json_x(mychips.chits,mychips.tallies)
  mychips.ba2b64v(bytea)
  mychips.j2h(jsonb)
} {
  returns mychips.chits language plpgsql as $$
    declare
      crec	mychips.chits;
      msg	jsonb = ch.chain_msg;		-- Remember incoming message
      propIdx	int = (msg->>'index')::int;	-- Suggested chaining index
      propConf	int = (msg->>'conf')::int;	-- Last confirmed end of chain
      propDgst	bytea = mychips.b64v2ba(msg->>'hash');
      prevDgst	bytea;				-- Hash from previous chit
      nextIdx	int;				-- Next index in our chain
      jrec	jsonb;
--      i		int;
    begin
      select into crec * from mychips.chits	-- Find our current end-of-chain chit
        where chit_ent = ch.chit_ent and chit_seq = ch.chit_seq
          and chain_idx notnull order by chain_idx desc limit 1;
--raise notice 'Cons T:%-%-% Conf:% Iss:% Units:% eX:% pX:% pD:% M:%', ta.tally_ent,ta.tally_seq,ta.tally_type,ta.chain_conf,ch.issuer,ch.units,crec.chain_idx,propIdx,propDgst,msg;

      if found then				-- Already have a chain
        nextIdx = greatest(crec.chain_idx + 1, 1);
        prevDgst = crec.chain_dgst;
      else					-- No chits in chain yet
        nextIdx = 1;				-- This will be the first
        prevDgst = ta.digest;			-- Begin with hash of the tally
      end if;
      ch.chain_msg = null;			-- Default to no message
--raise notice 'Cons CH: Idx:% nextIdx:% prev:%', ch.chain_idx, nextIdx, prevDgst;

-- Local transition -> good
-- --------------------------------------------------------------
      if msg->>'cmd' = 'loc' then		-- If chit modified by our user
        ch.chain_idx = nextIdx;			-- Link at end of our chain
        ch.chain_prev = prevDgst;
        ch.chain_dgst = mychips.j2h(mychips.chit_json_h(ch, ta));
--raise notice 'l X:% C:% d:%', ch.chain_idx, mychips.chit_json_h(ch, ta), ch.chain_dgst;

-- Update/insert from chain_process function below
-- --------------------------------------------------------------
      elsif msg->>'cmd' isnull then
        ch.chain_idx = coalesce(ch.chain_idx, propIdx, nextIdx);
        ch.chain_prev = mychips.chit_digest(ch.chit_ent, ch.chit_seq, ch.chain_idx - 1);
        ch.chain_dgst = mychips.j2h(mychips.chit_json_h(ch, ta));
--raise notice 'x C:% d:%', mychips.chit_json_h(ch, ta), ch.chain_dgst;

        update mychips.chits set chain_idx = null, chain_prev = null, chain_dgst = null	-- Bump any chit in our way
          where chit_ent = ch.chit_ent and chit_seq = ch.chit_seq
            and chit_idx != ch.chit_idx and chain_idx = ch.chain_idx;

-- Foil holder gets good chit from stock partner
-- --------------------------------------------------------------
      elsif msg->>'cmd' = 'new' and ta.tally_type = 'foil' then		-- we choose chit order
        ch.chain_idx = nextIdx;
        ch.chain_prev = prevDgst;
        ch.chain_dgst = mychips.j2h(mychips.chit_json_h(ch, ta));
--raise notice 'f X:% C:% d:%', ch.chain_idx, mychips.chit_json_h(ch, ta), ch.chain_dgst;

        if propDgst = ch.chain_dgst and propIdx = ch.chain_idx then	-- stock got it right
--raise notice 'Ack with Stock hash:%', ch.chain_dgst;
          ch.chain_msg = mychips.msg_ack(ch.chain_idx, ch.chain_dgst);
          perform mychips.chain_ratchet(ch.chit_ent, ch.chit_seq, propIdx);

        else					-- stock's hash doesn't look right
--raise notice 'Notify Stock %-%-% hash:%', propConf, propIdx, nextIdx, ch.chain_dgst;
          select into jrec jsonb_agg(json_chain) from (		-- List chits the stock has wrong
            select json_chain from mychips.chits_v where status = 'good' and
              chain_idx between least(propConf+1, ta.chain_conf+1, propIdx) and ch.chain_idx-1
              and chit_ent = ch.chit_ent and chit_seq = ch.chit_seq order by chain_idx
          ) s;
          ch.chain_msg = mychips.msg_upd(jrec || mychips.chit_json_x(ch,ta));	-- Include the present chit
        end if;		-- agree with stock's hash
--raise notice 'Cons FOIL: idx:% hash:% prv:% M:%', ch.chain_idx, ch.chain_dgst, ch.chain_prev, ch.chain_msg;

-- Stock holder:
-- --------------------------------------------------------------
      elsif msg->>'cmd' = 'new' and ta.tally_type = 'stock' then	-- we conform to foil
--raise notice 's C:% d:%', mychips.chit_json_h(ch, ta), ch.chain_dgst;

        if propIdx = nextIdx then		-- Incoming chit will fit right at the end
          ch.chain_idx = nextIdx;
          ch.chain_prev = prevDgst;
          ch.chain_dgst = mychips.j2h(mychips.chit_json_h(ch, ta));
--raise notice 'At end conf:% idx:% D:% P:%', ta.chain_conf, ch.chain_idx, ch.chain_dgst, ch.chain_prev;

        elsif propIdx < nextIdx and propIdx > ta.chain_conf then	-- Chit overlaps unconfirmed chits
          ch.chain_idx = propIdx;
          ch.chain_prev = mychips.chit_digest(ch.chit_ent, ch.chit_seq, ch.chain_idx - 1);
          ch.chain_dgst = mychips.j2h(mychips.chit_json_h(ch, ta));
--raise notice 'Conform conf:% idx:% D:% P:%', ta.chain_conf, ch.chain_idx, ch.chain_dgst, ch.chain_prev;

--raise notice 'i:% n:% D:% pD:%', ch.chain_idx, nextIdx, ch.chain_dgst, prevDgst;
          select into crec * from mychips.chits where chit_ent = ch.chit_ent and chit_seq = ch.chit_seq and chit_idx != ch.chit_idx and chain_idx = ch.chain_idx;
          if found then			-- Move the chit in our way to end of chain
            crec.chain_idx = nextIdx;
            crec.chain_prev = case when nextIdx = ch.chain_idx + 1 then ch.chain_dgst else prevDgst end;
            crec.chain_dgst = mychips.j2h(mychips.chit_json_h(crec, ta));
            update mychips.chits set
              chain_idx = crec.chain_idx, chain_prev = crec.chain_prev, chain_dgst = crec.chain_dgst,
              chain_msg = mychips.msg_upd(jsonb_build_array(mychips.chit_json_x(crec, ta)))
              where chit_ent = crec.chit_ent and chit_seq = crec.chit_seq and chit_idx = crec.chit_idx;
--if found then raise notice 'Bumped:% -> %', ch.chain_idx, nextIdx; end if;
          end if;	-- Found conflict
          
        else					-- No good place to put this chit
          ch.chain_idx = null;
          ch.chain_prev = null;
          ch.chain_dgst = null;
        end if;

        if ch.chain_dgst = propDgst then	-- If our end of chain hash agrees
          ch.chain_msg = mychips.msg_ack(ch.chain_idx, ch.chain_dgst);
          perform mychips.chain_ratchet(ch.chit_ent, ch.chit_seq, propIdx);

        elsif ch.chain_idx isnull then		-- Didn't even try to chain
          ch.chain_msg = mychips.msg_nak(propIdx);
        else					-- Tried but hash failed
          ch.chain_msg = mychips.msg_nak(ch.chain_idx, ch.chain_dgst);
        end if;
--raise notice 'Cons STOCK: idx:% hash:% prv:% M:%', ch.chain_idx, ch.chain_dgst, ch.chain_prev, ch.chain_msg;
      end if;	-- command/tally type

      if ch.status = 'chain' then
        ch.status = 'good';			-- Restore intended status
      end if;

      return ch;
    end;
$$;}

# Process chit chain messages as requested by the peer server process
#----------------------------------------------------------------
function {mychips.chain_process(msg jsonb, recipe jsonb)} {
  mychips.chain_notify_agent(mychips.chits,jsonb)
  mychips.ba2b64v(bytea)
  mychips.b64v2ba(text)
  mychips.chits
} {
  returns jsonb language plpgsql as $$
    declare
      cid	text	= msg->'to'->>'cid';
      agent	text	= msg->'to'->>'agent';
      obj	jsonb	= msg->'object';
      cmd	text	= obj->>'cmd';
      obDgst	bytea	= mychips.b64v2ba(obj->>'hash');
      jcDgst	bytea;
      index	int4;
      didit	boolean = false;
      crec	record;			-- Holds chits_v record
      trec	mychips.tallies;	-- Holds associated tally
      jrec	jsonb;
      qrec	record;
      ch	mychips.chits;
    begin
--raise notice 'Chainproc cid:% msg:% recipe:%', cid, msg, recipe;
      select into trec * from mychips.tallies
        where hold_cid = cid and tally_uuid = (obj->>'tally')::uuid and status = 'open';
      if not found then return null; end if;
--raise notice 'Chainproc T:%-% cid:% conf:% cmd:% R:%', trec.tally_ent, trec.tally_seq, cid, trec.chain_conf, cmd, recipe;

-- Reset message flag ---------------------------------------------
      if recipe::boolean then		-- No chits sent == ACK
        update mychips.chits set chain_msg = null
          where chit_ent = trec.tally_ent and chit_seq = trec.tally_seq and chit_uuid = (obj->>'uuid')::uuid;
        return to_jsonb(found);
      end if;

-- Ack Processor ---------------------------------------------
      if cmd = 'ack' then
        index = obj->>'index';
--raise notice 'Ack index:%', index;
        if index = 0 then		-- Special case for tally, block 0
          if trec.digest = obDgst then
            perform mychips.chain_ratchet(trec.tally_ent, trec.tally_seq, index);
          end if;
        else
          select into crec chit_ent, chit_seq, chit_idx, chain_dgst, chain_idx, state from mychips.chits_v
            where chit_ent = trec.tally_ent and chit_seq = trec.tally_seq and chain_idx = index;
          if index > 0 and not found then return null; end if;
--raise notice ' ack C:%-% eX:% h:%', crec.chit_ent, crec.chit_seq, crec.chain_dgst, obDgst;
          if crec.chain_dgst = obDgst then
            perform mychips.chain_ratchet(trec.tally_ent, trec.tally_seq, index);
          end if;
        end if;

-- Upd Processor ---------------------------------------------
      elsif cmd = 'upd' and (obj->>'chits') notnull then
--raise notice 'Chain upd:%', obj->'chits';
        for qrec in select * from (		-- Compare chits the foil sent us
            select jsonb_array_elements(obj->'chits') as j
          ) jc left join (        		-- to all we have on this end
            select * from mychips.chits
              where chit_ent = trec.tally_ent and chit_seq = trec.tally_seq
              and status = 'good' 		-- and chain_idx > trec.chain_conf
          ) c on c.digest = mychips.b64v2ba(jc.j->>'hash')
          order by jc.j->'chain'->>'index' asc nulls last, c.chain_idx, c.chit_idx
        loop
          index = (qrec.j->'chain'->'index')::int;
          jcDgst = mychips.b64v2ba(qrec.j->'chain'->>'hash');
--raise notice '  upd: eX:% mX:% D:% J:%', qrec.chain_idx, index, qrec.digest, qrec.j;
          if index isnull then continue; end if;	-- Bad info in update 

          if qrec.chain_idx = index and qrec.digest = jcDgst then 	-- We already have this chit OK?
--raise notice 'OK % %=%', qrec.j->'units', qrec.chain_idx, index;
            continue;
          end if;

          if qrec.chit_ent isnull then		-- We are missing a chit the other side has
--raise notice 'ADD % @:% M:%', qrec.j->'units', index, qrec.j->'chain';
            insert into mychips.chits (
              chit_ent,chit_seq,chit_uuid,chit_date,status,
              signature,issuer,units,reference,memo,chain_msg
            ) values (
              trec.tally_ent, trec.tally_seq, (qrec.j->>'uuid')::uuid,
              (qrec.j->>'date')::timestamptz, 'chain',
              qrec.j->>'sign', (qrec.j->>'by')::tally_side, (qrec.j->>'units')::bigint, 
              qrec.j->'ref', qrec.j->>'memo', qrec.j->'chain'
            ) returning * into ch;
            didit = true;

          elsif index notnull then		-- Otherwise, apply the partner's version of the chain index
--raise notice 'INDEX % %->% M:%', qrec.j->'units', qrec.chain_idx, index, qrec.j->'chain';
            update mychips.chits set
              chain_msg = qrec.j->'chain',
              chain_prev = null, status = 'chain'
              where chit_ent = qrec.chit_ent and chit_seq = qrec.chit_seq and chit_idx = qrec.chit_idx
              returning * into ch;
            didit = true;
          end if;
        end loop;

--raise notice 'Done upd:% X:% D:% O:% Q:%', didit, ch.chain_idx, ch.chain_dgst, obj, qrec;
        if didit then
--raise notice 'A: ch:% b:% c:%', ch.chain_dgst, jcDgst, obj->'hash';
          if ch.chain_dgst = jcDgst then	-- Ending hash agrees

--raise notice 'B:%-% C:%', ch.chit_ent, ch.chit_seq, ch.chain_idx;
            perform mychips.chain_notify_agent(ch, mychips.msg_ack(ch.chain_idx, ch.chain_dgst));
            perform mychips.chain_ratchet(ch.chit_ent, ch.chit_seq, ch.chain_idx);
          else
            perform mychips.chain_notify_agent(ch, mychips.msg_nak((obj->'index')::int));
          end if;

          with updated as (		-- Any chits still left unchained?
            update mychips.chits set status = 'chain'
            where status = 'good' and chain_msg isnull and chain_idx isnull
            and chit_ent = ch.chit_ent and chit_seq = ch.chit_seq returning *
          ) select jsonb_agg(mychips.chit_json_x(u.*, trec)) into jrec from updated u;
          if found and jrec notnull then
--raise notice 'Strays: %-%-% M:%', ch.chit_ent, ch.chit_seq, ch.chit_idx, jrec;
            perform mychips.chain_notify_agent(ch, mychips.msg_upd(jrec));
          end if;	-- found strays
        end if;		-- Did insert/updates
      end if;		-- Update
      return to_jsonb(true);
    end;
$$;}

# Notify the peer server process about chit chain messages that need to go out
#----------------------------------------------------------------
function {mychips.chain_notify_agent(ch mychips.chits, msg jsonb = null)} {mychips.chits} {
  returns boolean language plpgsql security definer as $$
    declare
        channel	text	= 'mychips_agent';
        jrec	jsonb;			-- Holds notify record
        trec	record;			-- Talley
    begin
        select into trec tally_uuid,hold_chad,hold_agent,part_chad from mychips.tallies_v where tally_ent = ch.chit_ent and tally_seq = ch.chit_seq;
        if not trec.hold_agent is null then
          channel = 'ma_' || trec.hold_agent;
        end if;

        jrec = jsonb_build_object(
          'target',	'chit',
          'action',	'chain',
          'to',		trec.part_chad,
          'from',	trec.hold_chad,
          'object',	coalesce(msg, ch.chain_msg) || jsonb_build_object(
            'tally',	trec.tally_uuid,
            'uuid',	ch.chit_uuid
          )
        );
--raise notice 'Chain notice:% E:% Cid:% J:%', channel, ch.chit_ent, trec.part_chad->>'cid', jrec;
        perform pg_notify(channel, jrec::text);
        return true;
    end;
$$;}
