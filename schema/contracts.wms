#Schema for storing contract documents
#Copyright MyCHIPs.org; See license in root of this package
#----------------------------------------------------------------
#TODO:
#- Use stored procedure/action to store digest, post release date?
#- Stored procedure to fetch a contract; wget it from url if we don't already have it
#- 
require trigview.tcl base.tcl
module mychips

namespace eval contracts {
    def contracts_pk	{host name version language}

    def contracts_v_in	[concat $contracts_pk top title text digest sections published]
    def contracts_v_up	$contracts_v_in
    def contracts_se	[concat $contracts_v_in $glob::stampfn]
}

table mychips.contracts {mychips base.language base.ent} {
    host	varchar		not null
  , name	varchar		not null
  , version	int		not null default 1 constraint "!mychips.contracts.BVN" check (version >= 1)
  , language	varchar		not null references base.language on update cascade on delete restrict
  , published	date	      , constraint "!mychips.contracts.PBC" check (published is null or (sections is not null and digest is not null))
  , top		boolean
  , title	varchar		not null
  , text	varchar
  , digest	bytea
  , sections	jsonb
  , primary key(host, name, version, language)
    eval(s $glob::stamps)
}
index {mychips_contracts_x_rid} {mychips.contracts mychips.ba2b64v(bytea)} {mychips.ba2b64v(digest)}

# Compute standard json output for a contract
#----------------------------------------------------------------
function {mychips.contract_json(c mychips.contracts)} {mychips.contracts} {
  returns jsonb stable language sql as $$
    select jsonb_strip_nulls(jsonb_build_object(
        'host',		c.host
      , 'name',		c.name
      , 'version',	c.version
      , 'language',	c.language
      , 'top',		c.top
      , 'published',	c.published
      , 'title',	c.title
      , 'text',		c.text
      , 'sections',	c.sections
    ))
$$;} -grant mychips

#Basic view
#----------------------------------------------------------------
view mychips.contracts_v {mychips.contracts mychips.contract_json(mychips.contracts) mychips.j2h(jsonb) mychips.ba2b64v(bytea)} {
    select eval(fld_list $contracts::contracts_se c)
  , mychips.ba2b64v(c.digest)					as rid
  , mychips.contract_json(c)					as json_core
  , mychips.contract_json(c) || jsonb_build_object(
      'rid',		mychips.ba2b64v(c.digest)
    )								as json
  , mychips.j2h(mychips.contract_json(c)) as digest_v
  , mychips.j2h(mychips.contract_json(c)) = coalesce(c.digest,'') as clean
  
    from	mychips.contracts c;

    eval(trigview::insert mychips.contracts_v mychips.contracts $contracts::contracts_v_in $contracts::contracts_pk $glob::stampin);
    eval(trigview::update mychips.contracts_v mychips.contracts $contracts::contracts_v_up $contracts::contracts_pk $glob::stampup);
    eval(rule_delete mychips.contracts_v mychips.contracts $contracts::contracts_pk);
} -grant {
    {contract	{s} {s i u} {d}}
}

# Before inserting a new contract
#----------------------------------------------------------------
function mychips.contracts_tf_bi() {mychips.contracts mychips.j2h(jsonb) mychips.contract_json(mychips.contracts)} {
  returns trigger language plpgsql security definer as $$
    begin
-- raise notice 'cbi: % % % %', new.host, new.name, new.version, new.language;
      if new.language is null then
        new.language = 'eng';
      end if;
      if new.version isnull then		-- Try to increment version
        select into new.version coalesce(version,0)+1 from mychips.contracts where host = new.host and name = new.name and language = new.language;
      end if;
      if new.version isnull then
        new.version = 1;
      end if;
-- raise notice 'cbiX: % % % %', new.host, new.name, new.version, new.language;
      if new.digest isnull then
        new.digest = mychips.j2h(mychips.contract_json(new));
      end if;
-- raise notice 'cbiZ: %', new.digest;
      return new;
    end;
$$;}
trigger mychips_contracts_tr_bi {} {
    before insert on mychips.contracts for each row execute procedure mychips.contracts_tf_bi();
}

# Materialize all references in a json contract (will blow up on circular recursion)
#----------------------------------------------------------------
function {mychips.contract_mat(contract jsonb)} {mychips.contracts_v} {
  returns jsonb language plpgsql as $$
    declare
      newObj		jsonb = contract;
      fetchedCont	jsonb;
      i			int;
    begin
    if not (contract ? 'sections') then
      return contract;
    end if;			--;raise notice 'S %', contract->'sections';
    for i in 0..jsonb_array_length(contract->'sections')-1 loop
      if ((contract->'sections'->i) ? 'source') then
        fetchedCont = (
          select json from mychips.contracts_v where rid = contract->'sections'->i->>'source'
        );
        if fetchedCont isnull then
          raise '!mychips.contracts:IRI %', contract->'sections'->i->>'source';
        end if;
        fetchedCont = mychips.contract_mat(fetchedCont);	-- Resolve sub-references
        newObj = jsonb_set(
          newObj,
          array['sections', i::text], 
          (newObj->'sections'->i) || fetchedCont
        );
      end if;
    end loop;
    return newObj;
  end;
$$;} -grant mychips

# Return the contract associated with the contract field from a tally
#----------------------------------------------------------------
function {mychips.contract_formal(tcont jsonb, mat boolean = false)} {mychips.contracts_v} {
  returns jsonb language plpgsql as $$
    declare
      rcont		jsonb;
      chost		text = 'mychips.org';
      source		text;
    begin
raise notice 'tc2: % %', tcont, mat;
      if jsonb_typeof(tcont) = 'string' then
        source = trim(both '"' from tcont::text);
      else
        source = coalesce(tcont->>'source',tcont->>'rid');
      end if;
      if tcont ? 'host' then
        chost = tcont->>'host';
      end if;
      select into rcont json from mychips.contracts_v where host = chost and rid = source;
raise notice 'tc2: % % %', chost, source, found;
      if not found then
        return null;
      end if;
      
      if mat then
        return mychips.contract_mat(rcont);
      end if;
      return rcont;
    end;
$$;} -grant mychips

# Update contracts in an orderly way (should really do this in the permissioned view)
#----------------------------------------------------------------
#function mychips.contracts_tf_bu() {mychips.contracts} {
#  returns trigger language plpgsql security definer as $$
#    begin
#      if old.published is not null then		-- Can't edit published contracts
#        return null;
#      end if;
#      if new.version < new.version then		-- Can't go back on versions
#        new.version = old.version;		
#      end if;
#      return new;
#    end;
#$$;}
#trigger mychips_contracts_tr_bu {} {
#    before update on mychips.contracts for each row execute procedure mychips.contracts_tf_bu();
#}

