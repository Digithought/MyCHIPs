#Database of MyCHIPs users represented by this server
#Copyright MyCHIPs.org; See license in root of this package
#----------------------------------------------------------------
#TODO:
#- What should users_v delete trigger to with peer table (nothing)?
#- How to support multiple mobi users for a single corporate CDI
#- How to support multiple credit partitions
#- 
require multiview.tcl base.tcl config.tcl

module mychips

namespace eval users {
    def users_pk	{user_ent}
    def users_v_up	{user_host user_port user_stat user_cmt host_id}
    def users_v_in	[concat $users_pk $users_v_up]
    def users_se	[concat $users_v_in crt_by crt_date mod_by]
    def peers_se	$peers::peers_v_in
    def ent_se		[concat $base::ent_pk $base::ent_v_in ent_num std_name frm_name giv_name cas_name age conn_pub]
    def ent_v_in	$base::ent_v_in
    def ent_v_up	[lremove $base::ent_v_up ent_type]
}

# Data about users to facilitate their CHIP account
#----------------------------------------------------------------
table mychips.users {base.ent mychips} {
    user_ent	text		primary key references base.ent on update cascade on delete cascade
  , user_host	text
  , user_port	int		
  , user_stat	varchar		not null default 'lck' constraint "!mychips.users.UST" check (user_stat in ('act','lck','off'))
  , user_cmt	varchar
  , host_id	varchar
  , _last_tally	int		not null default 0
    eval(s $glob::stamps)
}

# Quality check for new user records
#----------------------------------------------------------------
#function mychips.users_tf_bi() {mychips.users} {
#  returns trigger language plpgsql security definer as $$
#    begin
#--        if new._last_tally is null then new._last_tally = 0; end if;	-- Use this, not default in table to avoid multiview trying to write this field
#        return new;
#    end;
#$$;}
#trigger mychips_users_tr_bi {} {
#    before insert on mychips.users for each row execute procedure mychips.users_tf_bi();
#}

# Base view of users, linked to entity and peer tables
#----------------------------------------------------------------
view mychips.users_v {mychips.users mychips.peers base.ent_v base.parm_text(text,text) base.parm_int(text,text)} {select 
    eval(fld_list $users::ent_se	ee)
  , eval(fld_list $users::peers_se	pe)
  , eval(fld_list $users::users_se	ue)
  , coalesce(ue.user_host, pp.uhost) || ':' || coalesce(ue.user_port, pp.uport)	as user_sock
  , coalesce(pe.peer_host, pp.phost) || ':' || coalesce(pe.peer_port, pp.pport)	as peer_sock
  , pe.peer_cid || '@' || coalesce(pe.peer_host, pp.phost) || ':' || coalesce(pe.peer_port, pp.pport)	as peer_addr
  , greatest(ee.mod_date, pe.mod_date, ue.mod_date) as mod_date

    from	base.ent_v	ee
    left join	mychips.peers	pe on pe.peer_ent = ee.id
    left join	mychips.users	ue on ue.user_ent = ee.id
    left join	(select base.parm_text('mychips', 'user_host') uhost, base.parm_int('mychips', 'user_port') uport, base.parm_text('mychips', 'peer_host') phost, base.parm_int('mychips', 'peer_port') pport) as pp on true;

    eval(multiview::insert mychips.users_v "
        {base.ent	{$base::ent_v_in}	{$base::ent_pk}		{$glob::stampup}}
        {mychips.peers	{$peers::peers_v_in}	{$peers::peers_pk}}
        {mychips.users	{$users::users_v_in}	{$users::users_pk}}
    " mychips.users_v_check)
    eval(multiview::update mychips.users_v "
        {base.ent	{$users::ent_v_up}	{$base::ent_pk}		{$glob::stampup}}
        {mychips.peers	{$peers::peers_v_up}	{$peers::peers_pk}	{$glob::stampup}}
        {mychips.users	{$users::users_v_up}	{$users::users_pk}	{$glob::stampup}}
    " mychips.users_v_check)
    eval(multiview::delete mychips.users_v "
        {mychips.users	{$users::users_pk}	{(old.crt_by = session_user and (current_timestamp - old.crt_date) < '2 hours'::interval) or base.priv_has('userim',3)}}
    ")
} -grant {
    {user	{s} {i u} {d}}
} -primary id

# Quality check for new user records
#----------------------------------------------------------------
function {mychips.users_v_check(new mychips.users_v, old mychips.users_v, tgop text)} {mychips.users_v} {
  returns mychips.users_v language plpgsql security definer as $$
    begin
-- raise notice 'Users check: % % %', tgop, new.id, new.username;
      if (tgop = 'INSERT' and new.username is null) then
        new.username = new.id;
        update base.ent set username = new.id where id = new.id;
      end if;
-- Taken care of automatically:
--      if (tgop = 'UPDATE' and old.username is not null and new.username is null) then
--        delete from base.priv where grantee = old.username and priv = 'subst($mychips::usergroup)';
--      end if;
      if new.username is not null and not exists (select * from base.priv where grantee = new.username and priv = 'subst($mychips::usergroup)') then
        insert into base.priv (grantee, priv) values (new.username, 'subst($mychips::usergroup)');
      end if;
      return new;
    end;
$$;}

# View of users with primary address and contact points
#----------------------------------------------------------------
view mychips.users_v_flat {mychips.users_v base.addr_v_flat base.comm_v_flat} {select 
    u.*
  , a.bill_addr, a.bill_city, a.bill_state, a.bill_pcode, a.bill_country
  , a.ship_addr, a.ship_city, a.ship_state, a.ship_pcode, a.ship_country
  , c.phone_comm, c.cell_comm, c.email_comm, c.web_comm

    from	mychips.users_v		u
    left join	base.addr_v_flat	a on a.id = u.id
    left join	base.comm_v_flat	c on c.id = u.id
}

# What was this for?
#table mychips.comm_test {base.comm mychips} {
#    test_ent		text
#  , test_seq		int
#  , test_dat		varchar
#  , foreign key (test_ent, test_seq) references base.comm on update cascade on delete cascade
#}
