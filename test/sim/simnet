#!/bin/bash
#Run multiple servers on multiple machines to simulate a larger MyCHIPs network
#Usage:	./simnet
#	./simnet stop
#TODO:
#- Allow full command line switches:
#-  Whether to launch agent or just server
#-  Allow to append args to agent and server
#- Specify an individual machine to talk to in lieu of all
#- Control starting/stopping of services individually
#- Can execute arbitrary commands on remote computers
#- Launch a tail -f xterm on each server?
#- How to get progress updates to print in order, after correct Machine address?
#- Update database schema if/where appropriate
#- How to launch multiple separate servers for each necessary hostID?
#- 

#Examples:
#simnet start				#start defaults: peer server, agent model
#simlet stop
#simnet start peer
#simnet stop agent
#simnet start peer,'agent --runs=5'
#simnet q "delete from mychips.tallies"
#simnet db				#Freshen db build
#simnet init				#Clear worlddb, erase tallies, create agents
#simnet config				#Configure remote machines

#Common code
#-------------------------------------------------------------------------------
this="$(basename ${BASH_SOURCE})"
mypath="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";	#echo "mypath:$mypath"
source $mypath/config

pargs=()						#Positional arguments
while [[ $# -gt 0 ]]; do				#Grab command line arguments
  case $1 in
    -l|--locals) locals=($2); shift;;
    -r|--remotes) remotes=($2); shift;;
    --) shift; pargs+=("$@"); shift $#;;
    *) pargs+=("$1");;
  esac
  shift
done

cargs=()						#Encrypt positional arguments to go over ssh
for p in "${pargs[@]}"; do
#echo "arg:$p"
   cargs+=("$(echo "$p" | base64)")
done

#set -- "${pargs[@]}"					#Restore positional arguments (not needed for now)

mychips="$mypath"					#Get our bearings in the filesystem
mysim=""
while [[ $path != / ]]; do				#Find first bin dir above me
  if find "$mychips" -maxdepth 1 -mindepth 1 -type d -name bin | grep -q .; then
    break
  fi
  mysim="$(basename $mychips)/${mysim}"			#Find simulation directory
  mychips="$(cd $mychips/.. && pwd)"
done

if [ "$(basename "$mychips")" != "mychips" ]; then
  echo "Can't find mychips main directory"
  exit 1
fi

#echo "mychips:$mychips mysim:$mysim locals:$locals cargs:${cargs[*]}"; #exit 0

#Main
#-------------------------------------------------------------------------------
machidx=0
for mach in "${remotes[@]}"; do			#Update each machine with mirror of latest source code
  echo "Machine:$mach"
  if [ "$1" != "stop" ]; then
    rsync -ar --delete "$mychips" "$mychips"/../node_modules "$mychips"/../wylib "$mychips"/../wyselib "$mychips"/../wyseman "$mychips"/../wyclif "${user}@${mach}:${remsrc}"
  fi
  ssh -f -Y ${user}@${mach} "NODE_DEBUG=$NODE_DEBUG SIMNET_INDEX="$machidx" ${remsrc}/mychips/${mysim}sim.x ${cargs[@]}"
  machidx=$(expr $machidx + 1)
done

for mach in "${locals[@]}"; do			#Call remote script on local VMs
  ssh -f -Y ${USER}@${mach} "NODE_DEBUG=$NODE_DEBUG SIMNET_INDEX="$machidx" ${vmsrc}/mychips/${mysim}sim.x ${cargs[@]}"
  machidx=$(expr $machidx + 1)
done

sleep 1						#Give time for remote comments to post before returning to prompt
#echo Done
