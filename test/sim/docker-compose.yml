version: '3'
services:
  devel:
    build:
      context: ${mychips}
      dockerfile: build/docker-devel
    image: devel
    volumes:
      - "${locdir}/local/devel:/var/tmp/mychips"
      - "${mychips}/..:/usr/local/devel"
    working_dir: /usr/local/devel/mychips
    command: tail -f /dev/null

  mongo:
    build: 
      context: ${mychips}
      dockerfile: build/docker-mongo
    image: mongo
    ports:
      - "27017:27017"
    command: --replSet ${mongorepset}

  pg:
    build:
      context: ${mychips}
      dockerfile: build/docker-pg
    image: pg
    deploy:
      replicas: ${sites}
      resources:
        limits:
          cpus: '0.25'
          memory: 512M
    ports:
      - "5432"
    tty: true
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - ${mypath}/dbsetup.sh:/docker-entrypoint-initdb.d/dbsetup.sh
      - ${locdir}/pgdata:/var/lib/postgresql/data/pgdata

  spa:
    build: 
      context: ${mychips}
      dockerfile: build/docker-mychips
      args:
        version: ${version}
    image: spa
    deploy:
      replicas: ${sites}
      resources:
        limits:
          cpus: '0.25'
          memory: 512M
    ports:
      - "54320"
      - "8000"
    volumes:
      - ${locdir}/spadata:/var/tmp/mychips
      - ${mychips}/..:/usr/local/devel
      - ${locdir}/pki:/usr/local/devel/mychips/pki/local
    environment:
      NODE_DEBUG: ${NODE_DEBUG}
      MYCHIPS_DBHOST: pg0   # I think we'll need to link the spa and pg together differently than the current method. There's no way to tell docker which of the pg container nodes to connect to
    command: ${mysim}sim-c.sh spa
  