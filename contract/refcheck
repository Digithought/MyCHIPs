#!/usr/bin/env node
//Check any resource references in the specified yaml files
//Copyright MyCHIPs.org; See license in root of this package
// -----------------------------------------------------------------------------
//Usage: ./refcheck file1.yaml file2.yaml ...
//TODO:
//- update to correct references automatically
//-
const Fs = require('fs')
const Readline = require('readline')
const Yaml = require('yaml')
var argv = require('yargs').argv		//;console.log("argv:", argv)

const updateDigest = (file, findDigest, newDigest) => new Promise((resolve) => {
  let changed = false
    , tmpFile = file + '.tmp'
  const readInterface = Readline.createInterface({
    input: Fs.createReadStream(file),
    output: Fs.createWriteStream(tmpFile),
    console: false
  });

  readInterface.on('line', function(line) {
    if (!changed && line.trim().startsWith('source:')) {
      let oldDigest = line.match(/(source:\s*['"])(.+)(['"])/)[2]
console.log('O:', oldDigest, 'N:', newDigest)
      if (findDigest == oldDigest && newDigest != oldDigest) {
        let updLine = line.replace(/(source:\s*['"]).+(['"])/, `$1${newDigest}$2`);
        readInterface.output.write(updLine + '\n')		;console.log('Changed!')
        changed = true
      }
    } else {
      readInterface.output.write(line + '\n')
    }
  });

  readInterface.on('close', function() {
    if (changed)
      Fs.renameSync(tmpFile, file)			//,console.log('Rename:', tmpFile)
    else
      Fs.unlinkSync(tmpFile)				//,console.log('Unlink:', tmpFile)
//    resolve()
    setTimeout(resolve, 500)
  })
})

const grabRID = function(name) {			//console.log("grab:", file)
  let file = name + '.yaml'
    , yData = Fs.readFileSync(file).toString()		//Read Yaml file
    , jData = Yaml.parse(yData)				//Convert to json
    , contract = jData.contract
  return contract?.rid
}

const processFiles = async () => {			//console.log("file:", file)
  for (const file of argv._) {
    let yData = Fs.readFileSync(file).toString()	//Read Yaml file
      , jData = Yaml.parse(yData)			//Convert to json
      , contract = jData.contract
  
    for (let sec of contract?.sections) {
      let {name, source} = sec
      if (name && source) {
        let fileRID = grabRID(name)		//;console.log('n:', name, 's:', source)
        if (fileRID != source) {
          console.log(file, ':\n  ', source, "-->", fileRID)
          await updateDigest(file, source, fileRID)
        }
      }
    }
  }
}

processFiles()
