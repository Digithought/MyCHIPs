#!/usr/bin/env node
//Check any resource references in the specified yaml files
//Copyright MyCHIPs.org; See license in root of this package
// -----------------------------------------------------------------------------
//Usage: ./refcheck file1.yaml file2.yaml ...
//TODO:
//- update to correct references automatically
//-
const Fs = require('fs')
const Readline = require('readline')
const Yaml = require('yaml')
var argv = require('yargs').argv		//;console.log("argv:", argv)

const fs = require('fs');
const fsPromises = fs.promises; // Node.js File System module with Promises API
const readline = require('readline');
const { once } = require('events'); // To wait for an event

const updateDigest = async (file, findDigest, newDigest) => {
  let changed = false
    , tmpFile = file + '.tmp'
  
  const readStream = fs.createReadStream(file)
  const writeStream = fs.createWriteStream(tmpFile)
  const readInterface = readline.createInterface({
    input: readStream,
    output: writeStream
  })

  readInterface.on('line', (line) => {
    if (!changed && line.trim().startsWith('source:')) {
      let oldDigest = line.match(/(source:\s*['"])(.+)(['"])/)?.[2]
      console.log('O:', oldDigest, 'N:', newDigest)
      if ((findDigest === oldDigest || !findDigest && !oldDigest) && newDigest !== oldDigest) {
        // Directly replace the line with the new source: value
        let leading = line.match(/^( *)source:/)?.[1] || ''
          , updLine = `${leading}source: "${newDigest}"`
        
        readInterface.output.write(updLine + '\n')
        console.log('Changed!')
        changed = true
      } else {
        readInterface.output.write(line + '\n')
      }
    } else {
      readInterface.output.write(line + '\n')
    }
  })

  // Close the readline interface once all lines are processed
  readInterface.on('close', () => {
    writeStream.end()
  })

  // Wait for the stream to finish writing
  await once(writeStream, 'finish')

  // Perform the file operations asynchronously
  if (changed) {
    await fsPromises.rename(tmpFile, file)
  } else {
    await fsPromises.unlink(tmpFile)
  }
}

const grabRID = function(name) {			//console.log("grab:", file)
  let file = name + '.yaml'
    , yData = Fs.readFileSync(file).toString()		//Read Yaml file
    , jData = Yaml.parse(yData)				//Convert to json
    , contract = jData.contract
  return contract?.rid
}

const processFiles = async () => {			//console.log("file:", file)
  for (const file of argv._) {
    let yData = Fs.readFileSync(file).toString()	//Read Yaml file
      , jData = Yaml.parse(yData)			//Convert to json
      , contract = jData.contract
  
    for (let sec of contract?.sections) {
      let {name, source} = sec
      if (name) {
        let fileRID = grabRID(name)		//;console.log('n:', name, 's:', source)
        if (fileRID != source) {
          console.log(file, ':\n  ', source, "-->", fileRID)
          await updateDigest(file, source, fileRID)
        }
      }
    }
  }
}

processFiles()
