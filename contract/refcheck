#!/usr/bin/env node
//Check any resource references in the specified yaml files
//Copyright MyCHIPs.org; See license in root of this package
// -----------------------------------------------------------------------------
//Usage: ./refcheck file1.yaml file2.yaml ...
//TODO:
//- update to correct references automatically
//-
const Fs = require('fs')
const Yaml = require('yaml')
var argv = require('yargs').argv		//;console.log("argv:", argv)

const updateDigest = (file, newDigest) => {
  let found = false
    , changed = false
    , tmpFile = file + '.tmp'
  const readInterface = Readline.createInterface({
    input: Fs.createReadStream(file),
    output: Fs.createWriteStream(tmpFile),
    console: false
  });

  readInterface.on('line', function(line) {
    if (!found && line.trim().startsWith('rid:')) {
      let oldDigest = line.match(/(rid:\s*['"])(.+)(['"])/)[2]
//console.log('O:', oldDigest, 'N:', newDigest)
      if (newDigest != oldDigest) {
        let updLine = line.replace(/(rid:\s*['"]).+(['"])/, `$1${newDigest}$2`);
        readInterface.output.write(updLine + '\n')
        changed = true
      }
      found = true;
    } else {
      readInterface.output.write(line + '\n')
    }
  });

  readInterface.on('close', function() {
    if (changed)
      Fs.renameSync(tmpFile, file);
    else
      Fs.unlinkSync(tmpFile);
  });
}

const grabRID = function(name) {
  let file = name + '.yaml'
    , yData = Fs.readFileSync(file).toString()		//Read Yaml file
    , jData = Yaml.parse(yData)				//Convert to json
    , contract = jData.contract
  return contract?.rid
}

argv._.forEach(file => {
//  console.log("file:", file)
  let yData = Fs.readFileSync(file).toString()		//Read Yaml file
    , jData = Yaml.parse(yData)				//Convert to json
    , contract = jData.contract
  
  for (let sec of contract?.sections) {
    let {name, source} = sec
    if (name && source) {
      let fileRID = grabRID(name)		//;console.log('n:', name, 's:', source)
      if (fileRID != source) {
        console.log(file, ':\n  ', fileRID, "!=", source)
      }
    }
  }
})
