TODO:

Immediate:
X- Make agent model work well enough to generate data to analyze lift model
X- DB table to model, discover circuits
X- Discover circuits within same DB
X- Make svg graph more reactive--nodes too
X- Can show updating totals on the notes
X- Make server scheduler to execute local lifts as a transaction (on server authority?)
X- How to prioritize lifts?
X- Make separate report module that populates popup or report specific to report type
- 
X- Try launching contract editor from dbe
X- Put a strdoc inside dialog app div
X- Reports communicate back using same submit mechanism as dialog buttons
X- Can I put every report inside an iframe?
X- Window slot client reports whether it is printable (i.e. has an iframe)
X- Can I put a vue element inside an iframe?
- 
X- Get rid of big fat frame in iframe inside report
X- Open report windows re-populate on reload
- 
- Fix strdoc to include sub-documents
- Submit in strdoc bubbles up through to main program
- Can save content properly
- In update routine, peel out title, text, (tag = source?)
- Reload dbe after strdoc update?
- Get report dialog to swallow strdoc menu (and/or make it sticky)?
- Report popup has stringy or auto-hide menu
- Implement dirty flag in strdoc
- Get rid of valid flag in strdoc?
- 
- Implement a few basic contracts using strdoc widget
- Harden contract views so you can only update working contracts
- Implement publish procedure in backend
- Connect publish to an action menu
- How do actions work which have no preview window?
- 
- Use json-stable-stringify or fast-json-stable-stringify to generate hash
- 
- 
- Lift modeling:
- System for instantiating multiple databases, multiple servers
- Central repository where agent users can choose from peers, not in their own DB
- DB support for peers, which are not local users
- Make paths_v properly detect paths to/from peers not on the same DB
- 
- Create remote query protocol
- Query adjoining DB's for pathway information
- Populate local DB with stubs for remote peers
- 
- Create remote lift protocol
- Design state machine to execute lifts
- 
- Build better agent model:
- Communicates with server through user port?
- Learns about other peers through central repository
- Some users are in same DB, others in a different one
- Work harder if my accrued receivables get low  
- Raise vendor accumulation limits if my receivables get high
- Create lift incentives if I get stale imbalances
- Extend credit to peers based only on their credit-worthiness
- 

General roadmap:
X- Can create/exchange tallies, chits with a peer
- Create agent client module to model user, reads/writes/listens direct with DB
- Can spawn N user agents against M server instances
X- Create graphical canvas view of all users balance sheets
- Implement lift algorithm
- Implement basic contracts (author, display, publish)
X- Review copyright; Should we limit free to people who respect a base contract?
- Harden SPA connections, implement user ID's, schema permissions
- Implement digital signatures for tallies, chits, contracts, lifts
- Implement encrypted network communications, noise protocol
- Harden database schema
X- Make Admin SPA GUI useable, replace all functions of mc_admin
- Make User SPA GUI useable
- Optimize User SPA GUI for mobile
- Rollout
- Implement async email/text notifications
- Implement native mobile user app
- Implement tally confirmations
- Implement standardized export/import of user accounts via Admin interface
- Implement lock-down mode
- Implement backup/restore among peers
- 

User agent process:
-   Be more random on search for new client tally connection
-   Find a foil tally and pay some credits on it
-   Agent establishes reasonable number of tallies with other users
-   If I already have a tally with you, don't do another one
- Try installing/running with SL and NA
-   Fill in tally limits data for all users
-   Each agent pays his downstreamers periodically
- Fill in buy/sell orders data for all users (Can I derive this from existing tally limits)
- Develop state machine for data queries
-   Can you find a path to user X?
-   Store data about known pathways
- Develop state machine for lift execution
-   Would you participate in a lift destined for user X, for Y CHIPs?
X- Dummy sql to create initial draft tally
- Dummy sql files to simulate other required user actions
- User agent process runs randomized strategy
- 

DB/schema:
- Change base.ent to make id, unique to ent_type
- Make consolidated key target field: P100, A100, G100
- Adjust all subordinate tables to point to the target field
- Create json views for tally import/export?
- Only allow minimum, required access/permissions
- Is each server a single user, or do real user ID's flow all the way to the database connection?
- Can run from schema sources, or from compiled schema 
- 

Peer-to-peer:
- Socket connections should time out and close after an idle period
X- Create state diagram for chits
X- Implement chit state map that runs under standard state interpretor
- Cache chit totals for each tally, on the fly
- State diagram for lifts
- Table for buy/sell preferences
- Make command handler for peer server
- Make ssl socket server for peer interface
- Handle user command to issue stock ticket
- User agent reads stock ticket, connects to peer
- Can user stock ticket to establish stock tally with issuing peer
- Can connect to multiple ID's over same peer server port
- Separate SSL certificate for each peer connection
- User initiated commands:
-   Initiate tally with (peer)
-   Send money to (peer)
-   Send invoice to (peer)
-   Set sell target of (issue)
-   Set buy target for (issue)
-   Get balance summary (date)
-   Get income/expense summary (start, end)
- 

Server:
- Show graphical view of all users connected via a set of specified SQL servers
- Server listens for authenticated peer connections
- Peers can connect and validate
- Server initiates trade requests
- 
- Admin SPA:
- Optimize SVG user graph reactivity.  Only update what has changed.
- Server listens on ticket port for specified timeout period
- User can connect/initialize using ticket
- Can export user to JSON
- Can export user to paper, w/ QR code
-  Admin can edit, create documents
-   

Wylib:
- Wylib login/validation for SPA client/server connections
- Make reports run more sensibly whether they have options or not
- Wylib report
-   Reports survive reloads
-   Auto size iframe to container window size
-   Can print from strdoc component
-   Can print out tally contract (with QR code paper backup)?
- Can export dbp view to a spreadsheet
- Report graphics (i.e. ticket) can export to graphic, attach to email, etc.
- How/when to self-heal components if state has extra, or not enough attributes
- Support for spreadsheet reports?
- Should we use a spreadsheet widget with file export?
- See TODO's/Fixme's in dbp and dbe
- wmd defaults for wyselib parameters
- wmd defaults for other wyselib/base files?
- Menu selector for accessing available actions in Dbp
- Implement save/restore on each tab (later?)
- 

- Wyseman:
- Can apply incremental delta scripts to go from one release to another
- 

- User SPA:
-   Can grab ticket
-   Can generate, configure keys
-   Save data in localStorage
-   User can generate tickets for other peers
-   Server listens for peer ticket connections
-   Can register buy/sell parameters
- 

Advanced Features:
- Implement writing a check:
-   User mobile clients can talk to each other in absense of internet or server connection
-   They exchange a check
-   The check is 'cashed' or recorded once the network comes back up
-   

Old TODOs:
- Request for a certificate be signed by others I trust?
- Cert must link public key to a chip ID, and to a distinct person
- 
- Launch processes to:
-   Initiate lift queries
-   Freshen our pathway cache
- 
- User asynchronous functions:
-   Approve/reject invoice
-   Approve/reject new tally
-   Alarm, warning
-   Alarm, lockdown
- 
- Peer commands:
-   Request link to parties that have your issue for sale
-   Request link to parties that have your issue for sale
-   Pass my request through to a referenced peer
-   Request info about a pathway to (peer)
