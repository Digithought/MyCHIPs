TODO:
Immediate:
X- Port wyselib base.comm changes to base.addr
X- Back to testing json import/export
X- Why does test hang?
X- Establish working setup state for tally testing using json imports
X- Can I get various modules logging to different files?
- Write test program for establishing tallies (finish)
- Write test program for exchanging/approving chits
- Implement/test/finish chit state machine
- 

General roadmap:
- Can create/exchange tallies, chits with a peer
- Create agent client module to model user, reads/writes/listens direct with DB (in ruby?)
- Can spawn N user agents against M server instances
- Create graphical canvas view of all users balance sheets
- Implement lift algorithm
- Implement/publish basic contracts
- Implement digital signatures for tallies, chits, contracts, lifts
- Implement encrypted network communications, noise protocol
- Make Admin SPA GUI useable
- Make User SPA GUI useable
- Optimize User SPA GUI for mobile
- Rollout
- Implement async email/text notifications
- Implement native mobile user app
- Implement tally confirmations
- Implement standardized export/import of user accounts via Admin interface
- Implement lock-down mode
- Implement backup/restore among peers
- 

Peer-to-peer:
- Socket connections should time out and close after an idle period
- Create state diagram for chits
- Implement chit state map that runs under standard state interpretor
- Cache chit totals for each tally, on the fly
- State diagram for lifts
- Table for buy/sell preferences
- 

Agent modeling:
X- Dummy sql to create initial draft tally
- Dummy sql files to simulate other required user actions
- User agent ruby process runs randomized strategy
- Revive ruby command line admin program?
- Implement ruby command line user program?
- 
- Implement tally logic in postgresql:
X-  Create view that displays states of tallies
X-  Triggers generate notifies with correct action names
- Create json views for tally import/export?
- 
Server:
- Show graphical view of all users connected via a set of specified SQL servers
- 
- 

- Augment Wylib/wyseman:
X-  Can specify a set of actions
X-  Can specify a set of reports
X-  Can specify a set of subordinate views (example: phone, address)
-  Menu selector for opening sub-views available in Dbe
-  Menu selector for available reports in Dbe (also Dbp?)
-  Menu selector for accessing available actions in Dbe
-  Add information about foreign keys in wm.table_meta
- 
- Reports: (live, respond to DB notices)
-  On a single record:
-   Bar code for a ticket
-   PDF view of a drawing/figure
-  On a group of records:
-   An order (header, items), or invoice
-   A contract (comprising multiple, possibly nested clauses)
-  Broad array of queries (with settable parameters)
-   Balance sheet (date, periods, interval, etc.)
-   Income statement (start, end, periods, interval)
-   Dashboard
-   Arbitrary JS code (may not even access DB)
- 
- Admin SPA:
-X   Can add, update, delete users
-   Can generate user ticket
-   Server listens on ticket port for specified timeout period
-   User can connect/initialize using ticket
-   Can import user from JSON
-   Can export user to JSON
-   Admin can edit, create documents
-   
- User SPA:
-   Can grab ticket
-   Can generate, configure keys
-   Save data in localStorage
-   User can generate tickets for other peers
-   Server listens for peer ticket connections
-   Can register buy/sell parameters
- 
- Server:
-   Server listens for authenticated peer connections
-   Peers can connect and validate
-   Server initiates trade requests
- 
- Simple lift protocol
- Machine state kept in database
- Flow chart kept in control logic (JS object)
- 
- Wylib login/validation for SPA client/server connections
- 
- Implement contract documents  
- How to view/print a document?
- 
-   
-   

Old TODOs:

General:
- Make wyseman deployable as both ruby gem and npm module
- Deploy mychips as npm module
- Mychips NPM module includes multiple CLI commands
- 

Admin:
- Get wyseman admin to load a user.json file
- Fully port mc_admin prototype to JS
- Command line switch to run as daemon
- Switch to monitor web admin port (80?)
- Switch to monitor peer port
- Switch to monitor user port
- 

User Server:
- Fully port mc_admin prototype to JS
- Can mc_admin listen on multiple ports (i.e. a single server process in JS)?
- 

Mobile App:
- Port prototype to JS
- Multiple mobi users can connect to same port, if configured for it
- Separate site certificate for every user connection, or single site cert?
- 

Peer Operations:
- Make command handler for peer server
- Make ssl socket server for peer interface
- Handle user command to issue stock ticket
- User agent reads stock ticket, connects to peer
- Can user stock ticket to establish stock tally with issuing peer
- Can connect to multiple ID's over same peer server port
- Separate SSL certificate for each peer connection
- User initiated commands:
-   Initiate tally with (peer)
-   Send money to (peer)
-   Send invoice to (peer)
-   Set sell target of (issue)
-   Set buy target for (issue)
-   Get balance summary (date)
-   Get income/expense summary (start, end)
- 

Wyseman:
- JS API works
- JS API is npm package
- Implement primary connect points for each connect type (as with addresses)
- Generate build/upgrade SQL scripts to be called from app
- Table to store alter commands
- Ability to commit a release
- Can then edit/revise new working version
- 

General:
X- Are we using ssl certificates, or making our own?
X- Are we using an http server/client, or finding an ssl-capable peer socket protocol
- 
- Request for a certificate be signed by others I trust?
- Cert must link public key to a chip ID, and to a distinct person
- 
- How to trigger pro-active events?
-   Configured in the database?
- Launch processes to:
-   Initiate lift queries
-   Freshen our pathway cache
- 
- User asynchronous functions:
-   Approve/reject invoice
-   Approve/reject new tally
-   Alarm, warning
-   Alarm, lockdown
- 
- Peer commands:
X-   Request new tally with me
-   Request link to parties that have your issue for sale
-   Request link to parties that have your issue for sale
-   Pass my request through to a referenced peer
-   Request info about a pathway to (peer)
