TODO:

Immediate:
X- pop.vue asks app.vue for prefs, wm data
X- app.vue resends pref/wm any time it is updated
X- strdoc has pref/wm data available in its context
X- Use subs or sections for nested document sections?
X- Can update a document from report window
X- Change actionLaunch editCB to a bi-directional messageBus
X- Can send messages to a report window
X- Report (strdoc) optionaly clears, loads when dbe changes data
X- Large document makes window and parents blurry (only in Chrome)
X- Input some basic documents
X- Better spacing after section number
X- How do I include/reference other documents (and show hyperlinks)?
X- Make basic tally contract
X- Address hacked admin dilemma (enough for now)
- 
- Make simulation environment run on container-based servers
- Docker config files in build/
- test/local folder contains data folders for postgres instances
- 
- Move webpack.config into build/
- 
- Retool tallies.wms so tally_sets is an archive table only (real fields cached in tally)
- Signed tally (JSON) is a subset of full tally fields
- 
- Tallies/paths:
- Which parameters are signed in the tally, which can be changed later?
- Need tally_mod table?
- How do we go from JSON sequential tally ledger to SQL, and back?
- Consider all tally parameters when computing min/max on segment
- Generate min/max/cost in mychips.routes
- Compute min/max/cost in mychips.routes_v_lifts
- Allow user to generate path request to unknown user
- Can differentiate between user-generated path requests and auto-generated
- Stored procedure to check for needed retries (routes, tallies, chits)
- When to call these checkup functions?
- 
- Lifts:
- Phase 1 working: discover min/max/cost for competing pathways
- Phase 1 works for circular lifts
- Phase 1 works for linear lifts
- 
- Phase 2:
- Expand chit state diagram to handle phases 2 and 3
- Commit conditional chits on segment, and propagate request
- Implement new state transitions
- 
- Phase 3:
- Propage signatures back through lift chain
- Each segment does its own atomic commit
- 
- 
- Structured Documents:
- Build parameterized, local hyperlink from formal URL
- Export defaults to reasonable filename
- Contract json import works properly
- Files in contract folder are Real strdoc json format
- Bulk export action from dbp?
- Generate a digest on publish
- Lock the document on publish
- When/how do people verify the hash?
- Integrate document server with SPA server? (or have separate static folder)
- 
- 
- 
- Modify wyseman/lib/wyseman.js to also listen on regular unix socket for admin connections
- Regular socket connection relies solely on an auth key (key file, not keys stored in DB user tables)
- Use SNI extension for client to provide db config payload
- Is there any use case for a user connecting via regular socket? (native app?)
-   If so, socket connection needs to use connection tokens/keys just like websocket
- 
- Wylib improvements below (enough to get strdoc working)
- Make database owned by mychips, give admin read/write/delete but not create/drop
- 

General roadmap:
X- Can create/exchange tallies, chits with a peer
X- Create agent client module to model user, reads/writes/listens direct with DB
- Improve agent model (see below)
X- Can spawn N user agents against M server instances
X- Create graphical canvas view of all users balance sheets
X- Implement single-db lift algorithm
- Implement multi-db lift algorithm
- Implement basic contracts (author, display, publish)
X- Review copyright; Should we limit free to people who respect a base contract?
X- Harden SPA connections, implement user ID's, schema permissions
- Implement digital signatures for tallies, chits, contracts, lifts
- Implement encrypted peer communications using noise protocol
- Harden database schema, implementing full permission structure
- Implement schema version control strategy in wyseman
X- Make Admin SPA GUI useable, replace all functions of mc_admin
- Make Wylib User SPA GUI useable
- Rollout
- Create more optimal User SPA GUI for mobile
- Implement async email/text notifications
- Implement native mobile user app
- Implement tally confirmations
- Implement standardized export/import of user accounts via Admin interface
- Implement lock-down mode
- Implement backup/restore among peers
- 

General tasks by level of expertise required (redundant)
- Low Level: (code validation)
-   Write unit tests, which become part of the integrated test suite. 
-     Test existing state transition graphs for all conceivable combinations of state.
-     Attempt to request multiple, conflicting state transitions at once.
-     Proper retry/recovery of records that get stranded in a transitional state
- Medium Level: (network simulation)
-   Implement peer communication channel based on "noise protocol" to replace current lib/peercomm.js module
-   Write a more advanced agent model that reasonably simulates the choices an actual human would make when interacting with the system.
-   Examples include:  (where each character is randomly determined for individual agents)
-     Spending consumption costs at a regular rate
-     Luxury spending when more money is available
-     Being more or less of a saver
-     Accumulating varying amounts of foil-debit balances (savings bonds)
-     Getting a job when you are out of money
-     Finding other income sources
-     Acquiring capital assets (with and without associated debt)
-     Spending money with non-connected nodes (i.e. requesting linear lifts/drops)
-     Developing a reasonable number of downstream tally relationships (i.e. vendors)
-     Starting a credit certification aggregator (savings and loan)
-     Starting a vendor aggregator (credit card company)
- High Level: (architecture/design)
-   Does the existing tally state transition chart accurately represent all necessary cases?
-   Does the existing chit state transition chart accurately represent all necessary cases?
-   Augment the chit state transition chart to model distributed lifts
-   Augment the chit state machine to implement distributed lifts
-   Add key signing/validation regimen to tally process
-   Add key signing/validation regimen to chit/lift process

Lift modeling:
X- System for instantiating multiple databases, multiple servers
X- Central repository where agent users can choose from peers, not in their own DB
X- DB support for peers, which are not local users
X- Make paths_v properly detect paths to/from peers not on the same DB
X- Make state transition graph for pathway discovery
X- Make table to model outside paths
X- Review state logic for paths
X- Route state graph designed
X- Analyze possible routes to query each time a tally is added
X- Piggy-back route query on tally confirmation, or begin new route query if needed (no)
X- Build SQL for route state transition handler
X- Create route state transition map object properties
X- Ask peer for all possible combinations of his foil to other possible stocks
X- Route state queries initiated as part of tally dialog
X- Querying adjoining DB's for pathway information
X- Join inside paths with outside paths, detect useable circuits
X- Change host_id to server_tag and have better description
- Expand chit state diagram to include distributed lifts
- Implement distributed lifts in chit state machine (no separate lift handler?)
- Route state queries (find peer X) can be initiated explicitly (on user request)
- Distributed lifts
- Create remote lift protocol
-   Phase 1: route/size/cost confirmation
-   Phase 2: locking, conditional acceptance
-   Phase 3: signing
- Design state machine to execute distributed lifts
- 

- Agent2:
X-   Wait/stall when entering username on remote host
X-   Make module to communicate with foreign servers
X-   Insert my user before tally (using module)
X-   Some tallies being established to same user
-   BUG: Some tallies being established twice with same peer
-   BUG: Some tallies don't complete
-   What happens if a state transition fails due to contention?  Does it retry for success?
-   Don't try to add same peer again to mychips.peers if we connect to him twice (add on conflict clause ?)
-   Some chits are not getting beyond draft mode.  Why?
-   Spend CHIPs with more sensitivity to current net worth (other factors)
-   Seek/establish vendors, in addition to clients
-   Honor max clients, max vendors parameters from DB
- 
- Other:
- Can I mark a chit as refused, some way other than text in the signature?
- Change to aborted state after max number of retries/time (peer.js)
- Text descriptions for tallies/chits
- Style definitions for tallies/chits
- 
WyattERP:
X- Move makecert to wyclif package (still works in mychips?)
X- Column sort numbers are not showing on preview
X- Implement preferences screen
X- Allow separate prefs to be set from different modules
X- Can change preferences reactively
- Preferences:
-   App widget responsible for saving/restoring preference settings
-   Other modules can supply their own prefs defaults until better DB metadata arrives
-   Request wm Language object from app instead of direct from wyseman?
-   Request pr object from app instead of from prefs?
-   Make pdm option for fetching options from database via query (idx,title,help)
-   Make standard shortcut for language (there will be others too)
-   Can now select languages from prefs menu and app updates reactively
- Make standard shortcut for exists, given DB table, column
- 
- Reports/strdoc:
- Report windows fetch wm object/fields if/when needed from main (make strdoc work)
- Report windows implement optional control/parameter menu at top
- Strdoc and/or others put their menu next to the main control menu
- Reports have optional slave setting where they respond to key changes
- Auto update can be switched off in the report menu
- Reports have optional update setting where they can push data back to dbe and update database
- Strdoc now working good enough to build/edit MyCHIPs documents
- Implement document publish
- Published documents no longer writable
- Can reference documents within documents
- Do/can they print/render in-line or only separately?
- Can I query/fetch any document from any SPA (or peer?) server?
- Can I easily load them into my own database to keep a local mirror copy?
- I should have a copy of any contract referenced in any of my tallies (FK reference?)?
- Make tallies actually reference contracts existing in the DB
- 
- Wyseman DB connection with no schema info should wait/retry for DB to exist rather than failing
-   Can then get rid of "npm firstrun" in package.json and doc/Development
X- Get wysegi working (where does it go)?
- Wyseman won't open dbe for chit view (no wmd?)
- Test SSL connection to postgres
- Where to best put:
X-   Wysegi
-   WyattERP Admin console
-   WyattERP User (all available functions in tabs)
-   Reports work in WyattERP
X-   clientinfo ajax (wyclif)
- 
MyCHIPs General:
X- Re-enable wysegi serving (where does wysegi live now?)
X- Column sort in dbp throws error.  Why? (Only on first connect.  Bug seems to go away on reload.)
- 
X- Change global cdi concept to chip address resembling email: fred@mychips.com
-  and alternate url form: chip://fred@mychips.com:65430/?arg1=value...
- Implement tokens for users/peer connections
- Update agent2 to publish/access connection tokens in public DB
- 
- Enable user permission editor in admin app user tab
- Test: can the middleware servers recover if the database goes down and back up?
- 
- Strdoc:
- Can I edit/author documents now?
- What if I import a document into strdoc and then try to update?  (Do an insert?)
- Make source field I can enable with a button; Turns off other fields
- Preview mode includes language to refer to the included document (in current language?)
- Implement a few basic contracts using strdoc widget
- Harden contract views so you can only update working contracts (test)
- Implement publish procedure in backend (share code between reports)
- Begin wyseman library of server-side query builder functions (that reports can use)
- 
- How to serve my documents in HTML-viewable form if .html suffix given to web server
- Coded errors in wyseman.js get translated "badTuples" "badUpdate" etc
- 
- Network simulator
X-   Install default postgres configuration (limit access to local processes)
X-   Launch spa/clif server
-   Apply schema changes to the database (wyseman versioning?)
-   Launch any necessary peer servers (can this happen automatically?)
- 

User agent process:
X- Learns about other peers through central repository
X- Some users are in same DB, others in a different one
- Work harder if my accrued receivables get low  
- Raise vendor accumulation limits if my receivables get high
- Create lift incentives if I get stale imbalances
- Extend credit to peers based only on their credit-worthiness
-   Be more random on search for new client tally connection
-   Find a foil tally and pay some credits on it
-   Agent establishes reasonable number of tallies with other users
-   If I already have a tally with you, don't do another one
- Try installing/running with SL and NA
-   Fill in tally limits data for all users
-   Each agent pays his downstreamers periodically
- Fill in buy/sell orders data for all users (Can I derive this from existing tally limits)
- Develop state machine for data queries
-   Can you find a path to user X?
-   Store data about known pathways
- Develop state machine for lift execution
-   Would you participate in a lift destined for user X, for Y CHIPs?
X- Dummy sql to create initial draft tally
- Dummy sql files to simulate other required user actions
- User agent process runs randomized strategy
- 

Compatibility:
- Firefox issues:
- Firefox: Can't connect to wss:/ if certificate is insecure, even if exception granted by user
- Firefox: Drag/drop preview window highlights all text in the dragged window
- 

DB/schema:
X- Change base.ent to make id, unique to ent_type
X- Make consolidated key target field: P100, A100, G100
X- Adjust all subordinate tables to point to the target field
- Test json tally import/export
- Only allow minimum, required access/permissions
- Can run equally well from schema source build, or from compiled schema build
- 

Peer-to-peer:
- Socket connections should time out and close after an idle period
X- Create state diagram for chits
X- Implement chit state map that runs under standard state interpretor
- Cache chit totals for each tally, on the fly
- State diagram for lifts
- Table for buy/sell preferences
- Make command handler for peer server
- Make ssl socket server for peer interface
- Handle user command to issue stock ticket
- User agent reads stock ticket, connects to peer
- Can user stock ticket to establish stock tally with issuing peer
- Can connect to multiple ID's over same peer server port
- Separate SSL certificate for each peer connection
- User initiated commands:
-   Initiate tally with (peer)
-   Send money to (peer)
-   Send invoice to (peer)
-   Set sell target of (issue)
-   Set buy target for (issue)
-   Get balance summary (date)
-   Get income/expense summary (start, end)
- 

Server:
- Show graphical view of all users connected via a set of specified SQL servers
- Server listens for authenticated peer connections
- Peers can connect and validate
- Server initiates trade requests
- 
- Admin SPA:
X- Optimize SVG user graph reactivity.  Only update what has changed.
- Server listens on ticket port for specified timeout period
- User can connect/initialize using ticket
- Can export user to JSON
- Can export user to paper, w/ QR code
-  Admin can edit, create documents
-   

Wylib:
- I get errors on reload when dbe and dbs both open on a dbp
- Implement default load column in views, wylib uses it if present
- Implement default order column in views, wylib uses it if present
- Update audit tables to store changes as JSON
- Automatic reconnect retry working right
- Handle state changes correct when connecting to new/different backend
X- Wylib login/validation for SPA client/server connections
- Wylib report
-   Can print from strdoc component
-   Can print out tally contract (with QR code paper backup)?
- Can export dbp view to a spreadsheet
- Report graphics (i.e. ticket) can export to graphic, attach to email, etc.
- Support for spreadsheet reports?
- Should we use a spreadsheet widget with file export?
X- Write wmd files for wyselib parameters
- Write wmd defaults for other wyselib/base files?
- Can launch actions from a dbp with multiple keys
- Should each tab have a menu that launches new previews, and can save/restore state?
- 

- Wyseman:
- Can apply incremental delta scripts to go from one release to another
- 

- User SPA:
-   Can grab ticket
-   Can generate, configure keys
-   Save data in localStorage
-   User can generate tickets for other peers
-   Server listens for peer ticket connections
-   Can register buy/sell parameters
- 

Advanced Features:
- Implement writing a check:
-   User mobile clients can talk to each other in absense of internet or server connection
-   They exchange a check
-   The check is 'cashed' or recorded once the network comes back up
-   

Old TODOs:
- Request for a certificate be signed by others I trust?
- Cert must link public key to a chip ID, and to a distinct person
- 
- Launch processes to:
-   Initiate lift queries
-   Freshen our pathway cache
- 
- User asynchronous functions:
-   Approve/reject invoice
-   Approve/reject new tally
-   Alarm, warning
-   Alarm, lockdown
- 
- Peer commands:
-   Request link to parties that have your issue for sale
-   Request link to parties that have your issue for sale
-   Pass my request through to a referenced peer
-   Request info about a pathway to (peer)
