#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

TEST_DIR_NAME="__tests__"
TEST_RUNNER_NAME="run.sh"
remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
ROOT_DIR=$(git rev-parse --show-toplevel)
cd $ROOT_DIR
ROOT_DIR="."

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero" 
  then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero" 
    then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

    changedFiles=$(git diff-tree --no-commit-id --name-only $range -r)
		# Check for WIP commit
    testDirs=()
    for file in $changedFiles
    do
      current=$file
      while [[ $current != "." ]]
      do
        current=$(dirname $current)
        if [ -d "${ROOT_DIR}/${current}/${TEST_DIR_NAME}/" ]
        then
          testDirs+=("${ROOT_DIR}/${current}/${TEST_DIR_NAME}/")
        fi
      done
      #Remove duplicates
    done
    #remove duplicates
    unique_testDirs=($(echo "${testDirs[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
    for dir in ${unique_testDirs[@]}
    do
      if [[ -f "${dir}${TEST_RUNNER_NAME}" ]]
      then
        ${dir}${TEST_RUNNER_NAME}
        errorCode=$?
        if [ $errorCode -eq 0 ]; 
        then
          echo "TEST SUITE PASSED AT: ${dir}" 
        else
          echo >&2 "TEST SUITE FAILED AT: ${dir}" 
          exit $errorCode
        fi
      fi
    done
	fi
done

exit 0 #ALL TESTS PASSED PROCEED WITH PUSH
